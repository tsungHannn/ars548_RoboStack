# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/Object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Object(genpy.Message):
  _md5sum = "7a6bf48af76a68f467d67dd7b1137272"
  _type = "ars548_messages/Object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 u_statussensor #tbd
uint32 u_id #Unique ID of object
uint16 u_age #Age of object
uint8 u_statusmeasurement #Object Status
uint8 u_statusmovement #Object Movement Status
uint16 u_position_invalidflags #tbd
uint8 u_position_reference #Reference point position
float32 u_position_x #X Position of reference point
float32 u_position_x_std #X Position Std
float32 u_position_y #Y Position of reference point
float32 u_position_y_std #Y Position Std
float32 u_position_z #Z Position of reference point
float32 u_position_z_std #Z Position Std
float32 u_position_covariancexy #Covariance X Y
float32 u_position_orientation #Object Orientation
float32 u_position_orientation_std #Orientation Std
uint8 u_existence_invalidflags #unused
float32 u_existence_probability #Probability of Existence
float32 u_existence_ppv #unused
uint8 u_classification_car #Car Classification Probability
uint8 u_classification_truck #Truck Classification Probability
uint8 u_classification_motorcycle #Motorcycle Classification Probability
uint8 u_classification_bicycle #Bicycle Classification Probability
uint8 u_classification_pedestrian #Pedestrian Classification Probability
uint8 u_classification_animal #Animal Classification Probability
uint8 u_classification_hazard #Hazard Classification Probability
uint8 u_classification_unknown #Unknown Classification Probability
uint8 u_classification_overdrivable #unused
uint8 u_classification_underdrivable #unused
uint8 u_dynamics_absvel_invalidflags #unused
float32 f_dynamics_absvel_x #X Absolute Velocity
float32 f_dynamics_absvel_x_std #X Absolute Velocity Std
float32 f_dynamics_absvel_y #Y Absolute Velocity
float32 f_dynamics_absvel_y_std #Y Absolute Velocity Std
float32 f_dynamics_absvel_covariancexy #Covariance Absolute Velocity X Y
uint8 u_dynamics_relvel_invalidflags #unused
float32 f_dynamics_relvel_x #X Relative Velocity
float32 f_dynamics_relvel_x_std #X Relative Velocity Std
float32 f_dynamics_relvel_y #Y Relative Velocity
float32 f_dynamics_relvel_y_std #Y Relative Velocity Std
float32 f_dynamics_relvel_covariancexy #Covariance Relative Velocity X Y
uint8 u_dynamics_absaccel_invalidflags #unused
float32 f_dynamics_absaccel_x #X Absolute Acceleration
float32 f_dynamics_absaccel_x_std #X Absolute Acceleration Std
float32 f_dynamics_absaccel_y #Y Absolute Acceleration
float32 f_dynamics_absaccel_y_std #Y Absolute Acceleration Std
float32 f_dynamics_absaccel_covariancexy #Covariance Absolute Acceleration X Y
uint8 u_dynamics_relaccel_invalidflags #unused
float32 f_dynamics_relaccel_x #X Relative Acceleration
float32 f_dynamics_relaccel_x_std #X Relative Acceleration Std
float32 f_dynamics_relaccel_y #Y Relative Acceleration
float32 f_dynamics_relaccel_y_std #Y Relative Acceleration Std
float32 f_dynamics_relaccel_covariancexy #Covariance Relative Acceleration X Y
uint8 u_dynamics_orientation_invalidflags #unused
float32 u_dynamics_orientation_rate_mean #Object Orientation Rate
float32 u_dynamics_orientation_rate_std #Orientation Rate Std
uint32 u_shape_length_status #(unused) Shape Length Status
uint8 u_shape_length_edge_invalidflags #(unused) Invalid Flags Shape Length 
float32 u_shape_length_edge_mean #Mean Shape Length
float32 u_shape_length_edge_std #(unused) Shape Length Std
uint32 u_shape_width_status #(unused) Shape Width Status 
uint8 u_shape_width_edge_invalidflags #(unused) Invalid Flags Shape Width
float32 u_shape_width_edge_mean #Mean Shape Width
float32 u_shape_width_edge_std #(unused) Shape Width Std """
  __slots__ = ['u_statussensor','u_id','u_age','u_statusmeasurement','u_statusmovement','u_position_invalidflags','u_position_reference','u_position_x','u_position_x_std','u_position_y','u_position_y_std','u_position_z','u_position_z_std','u_position_covariancexy','u_position_orientation','u_position_orientation_std','u_existence_invalidflags','u_existence_probability','u_existence_ppv','u_classification_car','u_classification_truck','u_classification_motorcycle','u_classification_bicycle','u_classification_pedestrian','u_classification_animal','u_classification_hazard','u_classification_unknown','u_classification_overdrivable','u_classification_underdrivable','u_dynamics_absvel_invalidflags','f_dynamics_absvel_x','f_dynamics_absvel_x_std','f_dynamics_absvel_y','f_dynamics_absvel_y_std','f_dynamics_absvel_covariancexy','u_dynamics_relvel_invalidflags','f_dynamics_relvel_x','f_dynamics_relvel_x_std','f_dynamics_relvel_y','f_dynamics_relvel_y_std','f_dynamics_relvel_covariancexy','u_dynamics_absaccel_invalidflags','f_dynamics_absaccel_x','f_dynamics_absaccel_x_std','f_dynamics_absaccel_y','f_dynamics_absaccel_y_std','f_dynamics_absaccel_covariancexy','u_dynamics_relaccel_invalidflags','f_dynamics_relaccel_x','f_dynamics_relaccel_x_std','f_dynamics_relaccel_y','f_dynamics_relaccel_y_std','f_dynamics_relaccel_covariancexy','u_dynamics_orientation_invalidflags','u_dynamics_orientation_rate_mean','u_dynamics_orientation_rate_std','u_shape_length_status','u_shape_length_edge_invalidflags','u_shape_length_edge_mean','u_shape_length_edge_std','u_shape_width_status','u_shape_width_edge_invalidflags','u_shape_width_edge_mean','u_shape_width_edge_std']
  _slot_types = ['uint16','uint32','uint16','uint8','uint8','uint16','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','float32','uint8','float32','float32','uint32','uint8','float32','float32','uint32','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u_statussensor,u_id,u_age,u_statusmeasurement,u_statusmovement,u_position_invalidflags,u_position_reference,u_position_x,u_position_x_std,u_position_y,u_position_y_std,u_position_z,u_position_z_std,u_position_covariancexy,u_position_orientation,u_position_orientation_std,u_existence_invalidflags,u_existence_probability,u_existence_ppv,u_classification_car,u_classification_truck,u_classification_motorcycle,u_classification_bicycle,u_classification_pedestrian,u_classification_animal,u_classification_hazard,u_classification_unknown,u_classification_overdrivable,u_classification_underdrivable,u_dynamics_absvel_invalidflags,f_dynamics_absvel_x,f_dynamics_absvel_x_std,f_dynamics_absvel_y,f_dynamics_absvel_y_std,f_dynamics_absvel_covariancexy,u_dynamics_relvel_invalidflags,f_dynamics_relvel_x,f_dynamics_relvel_x_std,f_dynamics_relvel_y,f_dynamics_relvel_y_std,f_dynamics_relvel_covariancexy,u_dynamics_absaccel_invalidflags,f_dynamics_absaccel_x,f_dynamics_absaccel_x_std,f_dynamics_absaccel_y,f_dynamics_absaccel_y_std,f_dynamics_absaccel_covariancexy,u_dynamics_relaccel_invalidflags,f_dynamics_relaccel_x,f_dynamics_relaccel_x_std,f_dynamics_relaccel_y,f_dynamics_relaccel_y_std,f_dynamics_relaccel_covariancexy,u_dynamics_orientation_invalidflags,u_dynamics_orientation_rate_mean,u_dynamics_orientation_rate_std,u_shape_length_status,u_shape_length_edge_invalidflags,u_shape_length_edge_mean,u_shape_length_edge_std,u_shape_width_status,u_shape_width_edge_invalidflags,u_shape_width_edge_mean,u_shape_width_edge_std

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u_statussensor is None:
        self.u_statussensor = 0
      if self.u_id is None:
        self.u_id = 0
      if self.u_age is None:
        self.u_age = 0
      if self.u_statusmeasurement is None:
        self.u_statusmeasurement = 0
      if self.u_statusmovement is None:
        self.u_statusmovement = 0
      if self.u_position_invalidflags is None:
        self.u_position_invalidflags = 0
      if self.u_position_reference is None:
        self.u_position_reference = 0
      if self.u_position_x is None:
        self.u_position_x = 0.
      if self.u_position_x_std is None:
        self.u_position_x_std = 0.
      if self.u_position_y is None:
        self.u_position_y = 0.
      if self.u_position_y_std is None:
        self.u_position_y_std = 0.
      if self.u_position_z is None:
        self.u_position_z = 0.
      if self.u_position_z_std is None:
        self.u_position_z_std = 0.
      if self.u_position_covariancexy is None:
        self.u_position_covariancexy = 0.
      if self.u_position_orientation is None:
        self.u_position_orientation = 0.
      if self.u_position_orientation_std is None:
        self.u_position_orientation_std = 0.
      if self.u_existence_invalidflags is None:
        self.u_existence_invalidflags = 0
      if self.u_existence_probability is None:
        self.u_existence_probability = 0.
      if self.u_existence_ppv is None:
        self.u_existence_ppv = 0.
      if self.u_classification_car is None:
        self.u_classification_car = 0
      if self.u_classification_truck is None:
        self.u_classification_truck = 0
      if self.u_classification_motorcycle is None:
        self.u_classification_motorcycle = 0
      if self.u_classification_bicycle is None:
        self.u_classification_bicycle = 0
      if self.u_classification_pedestrian is None:
        self.u_classification_pedestrian = 0
      if self.u_classification_animal is None:
        self.u_classification_animal = 0
      if self.u_classification_hazard is None:
        self.u_classification_hazard = 0
      if self.u_classification_unknown is None:
        self.u_classification_unknown = 0
      if self.u_classification_overdrivable is None:
        self.u_classification_overdrivable = 0
      if self.u_classification_underdrivable is None:
        self.u_classification_underdrivable = 0
      if self.u_dynamics_absvel_invalidflags is None:
        self.u_dynamics_absvel_invalidflags = 0
      if self.f_dynamics_absvel_x is None:
        self.f_dynamics_absvel_x = 0.
      if self.f_dynamics_absvel_x_std is None:
        self.f_dynamics_absvel_x_std = 0.
      if self.f_dynamics_absvel_y is None:
        self.f_dynamics_absvel_y = 0.
      if self.f_dynamics_absvel_y_std is None:
        self.f_dynamics_absvel_y_std = 0.
      if self.f_dynamics_absvel_covariancexy is None:
        self.f_dynamics_absvel_covariancexy = 0.
      if self.u_dynamics_relvel_invalidflags is None:
        self.u_dynamics_relvel_invalidflags = 0
      if self.f_dynamics_relvel_x is None:
        self.f_dynamics_relvel_x = 0.
      if self.f_dynamics_relvel_x_std is None:
        self.f_dynamics_relvel_x_std = 0.
      if self.f_dynamics_relvel_y is None:
        self.f_dynamics_relvel_y = 0.
      if self.f_dynamics_relvel_y_std is None:
        self.f_dynamics_relvel_y_std = 0.
      if self.f_dynamics_relvel_covariancexy is None:
        self.f_dynamics_relvel_covariancexy = 0.
      if self.u_dynamics_absaccel_invalidflags is None:
        self.u_dynamics_absaccel_invalidflags = 0
      if self.f_dynamics_absaccel_x is None:
        self.f_dynamics_absaccel_x = 0.
      if self.f_dynamics_absaccel_x_std is None:
        self.f_dynamics_absaccel_x_std = 0.
      if self.f_dynamics_absaccel_y is None:
        self.f_dynamics_absaccel_y = 0.
      if self.f_dynamics_absaccel_y_std is None:
        self.f_dynamics_absaccel_y_std = 0.
      if self.f_dynamics_absaccel_covariancexy is None:
        self.f_dynamics_absaccel_covariancexy = 0.
      if self.u_dynamics_relaccel_invalidflags is None:
        self.u_dynamics_relaccel_invalidflags = 0
      if self.f_dynamics_relaccel_x is None:
        self.f_dynamics_relaccel_x = 0.
      if self.f_dynamics_relaccel_x_std is None:
        self.f_dynamics_relaccel_x_std = 0.
      if self.f_dynamics_relaccel_y is None:
        self.f_dynamics_relaccel_y = 0.
      if self.f_dynamics_relaccel_y_std is None:
        self.f_dynamics_relaccel_y_std = 0.
      if self.f_dynamics_relaccel_covariancexy is None:
        self.f_dynamics_relaccel_covariancexy = 0.
      if self.u_dynamics_orientation_invalidflags is None:
        self.u_dynamics_orientation_invalidflags = 0
      if self.u_dynamics_orientation_rate_mean is None:
        self.u_dynamics_orientation_rate_mean = 0.
      if self.u_dynamics_orientation_rate_std is None:
        self.u_dynamics_orientation_rate_std = 0.
      if self.u_shape_length_status is None:
        self.u_shape_length_status = 0
      if self.u_shape_length_edge_invalidflags is None:
        self.u_shape_length_edge_invalidflags = 0
      if self.u_shape_length_edge_mean is None:
        self.u_shape_length_edge_mean = 0.
      if self.u_shape_length_edge_std is None:
        self.u_shape_length_edge_std = 0.
      if self.u_shape_width_status is None:
        self.u_shape_width_status = 0
      if self.u_shape_width_edge_invalidflags is None:
        self.u_shape_width_edge_invalidflags = 0
      if self.u_shape_width_edge_mean is None:
        self.u_shape_width_edge_mean = 0.
      if self.u_shape_width_edge_std is None:
        self.u_shape_width_edge_std = 0.
    else:
      self.u_statussensor = 0
      self.u_id = 0
      self.u_age = 0
      self.u_statusmeasurement = 0
      self.u_statusmovement = 0
      self.u_position_invalidflags = 0
      self.u_position_reference = 0
      self.u_position_x = 0.
      self.u_position_x_std = 0.
      self.u_position_y = 0.
      self.u_position_y_std = 0.
      self.u_position_z = 0.
      self.u_position_z_std = 0.
      self.u_position_covariancexy = 0.
      self.u_position_orientation = 0.
      self.u_position_orientation_std = 0.
      self.u_existence_invalidflags = 0
      self.u_existence_probability = 0.
      self.u_existence_ppv = 0.
      self.u_classification_car = 0
      self.u_classification_truck = 0
      self.u_classification_motorcycle = 0
      self.u_classification_bicycle = 0
      self.u_classification_pedestrian = 0
      self.u_classification_animal = 0
      self.u_classification_hazard = 0
      self.u_classification_unknown = 0
      self.u_classification_overdrivable = 0
      self.u_classification_underdrivable = 0
      self.u_dynamics_absvel_invalidflags = 0
      self.f_dynamics_absvel_x = 0.
      self.f_dynamics_absvel_x_std = 0.
      self.f_dynamics_absvel_y = 0.
      self.f_dynamics_absvel_y_std = 0.
      self.f_dynamics_absvel_covariancexy = 0.
      self.u_dynamics_relvel_invalidflags = 0
      self.f_dynamics_relvel_x = 0.
      self.f_dynamics_relvel_x_std = 0.
      self.f_dynamics_relvel_y = 0.
      self.f_dynamics_relvel_y_std = 0.
      self.f_dynamics_relvel_covariancexy = 0.
      self.u_dynamics_absaccel_invalidflags = 0
      self.f_dynamics_absaccel_x = 0.
      self.f_dynamics_absaccel_x_std = 0.
      self.f_dynamics_absaccel_y = 0.
      self.f_dynamics_absaccel_y_std = 0.
      self.f_dynamics_absaccel_covariancexy = 0.
      self.u_dynamics_relaccel_invalidflags = 0
      self.f_dynamics_relaccel_x = 0.
      self.f_dynamics_relaccel_x_std = 0.
      self.f_dynamics_relaccel_y = 0.
      self.f_dynamics_relaccel_y_std = 0.
      self.f_dynamics_relaccel_covariancexy = 0.
      self.u_dynamics_orientation_invalidflags = 0
      self.u_dynamics_orientation_rate_mean = 0.
      self.u_dynamics_orientation_rate_std = 0.
      self.u_shape_length_status = 0
      self.u_shape_length_edge_invalidflags = 0
      self.u_shape_length_edge_mean = 0.
      self.u_shape_length_edge_std = 0.
      self.u_shape_width_status = 0
      self.u_shape_width_edge_invalidflags = 0
      self.u_shape_width_edge_mean = 0.
      self.u_shape_width_edge_std = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().pack(_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 187
      (_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std,) = _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().pack(_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 187
      (_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std,) = _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f = None
def _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f():
    global _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f
    if _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f is None:
        _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f = struct.Struct("<HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f")
    return _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f
