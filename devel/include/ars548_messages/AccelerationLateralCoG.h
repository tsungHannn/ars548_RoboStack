// Generated by gencpp from file ars548_messages/AccelerationLateralCoG.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_ACCELERATIONLATERALCOG_H
#define ARS548_MESSAGES_MESSAGE_ACCELERATIONLATERALCOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct AccelerationLateralCoG_
{
  typedef AccelerationLateralCoG_<ContainerAllocator> Type;

  AccelerationLateralCoG_()
    : accelerationlateralerramp(0.0)
    , accelerationlateralerramp_invalidflag(0)
    , qualifieraccelerationlateral(0)
    , accelerationlateral(0.0)
    , accelerationlateral_invalidflag(0)
    , accelerationlateraleventdataqualifier(0)  {
    }
  AccelerationLateralCoG_(const ContainerAllocator& _alloc)
    : accelerationlateralerramp(0.0)
    , accelerationlateralerramp_invalidflag(0)
    , qualifieraccelerationlateral(0)
    , accelerationlateral(0.0)
    , accelerationlateral_invalidflag(0)
    , accelerationlateraleventdataqualifier(0)  {
  (void)_alloc;
    }



   typedef float _accelerationlateralerramp_type;
  _accelerationlateralerramp_type accelerationlateralerramp;

   typedef uint8_t _accelerationlateralerramp_invalidflag_type;
  _accelerationlateralerramp_invalidflag_type accelerationlateralerramp_invalidflag;

   typedef uint8_t _qualifieraccelerationlateral_type;
  _qualifieraccelerationlateral_type qualifieraccelerationlateral;

   typedef float _accelerationlateral_type;
  _accelerationlateral_type accelerationlateral;

   typedef uint8_t _accelerationlateral_invalidflag_type;
  _accelerationlateral_invalidflag_type accelerationlateral_invalidflag;

   typedef uint8_t _accelerationlateraleventdataqualifier_type;
  _accelerationlateraleventdataqualifier_type accelerationlateraleventdataqualifier;





  typedef boost::shared_ptr< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationLateralCoG_

typedef ::ars548_messages::AccelerationLateralCoG_<std::allocator<void> > AccelerationLateralCoG;

typedef boost::shared_ptr< ::ars548_messages::AccelerationLateralCoG > AccelerationLateralCoGPtr;
typedef boost::shared_ptr< ::ars548_messages::AccelerationLateralCoG const> AccelerationLateralCoGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator1> & lhs, const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator2> & rhs)
{
  return lhs.accelerationlateralerramp == rhs.accelerationlateralerramp &&
    lhs.accelerationlateralerramp_invalidflag == rhs.accelerationlateralerramp_invalidflag &&
    lhs.qualifieraccelerationlateral == rhs.qualifieraccelerationlateral &&
    lhs.accelerationlateral == rhs.accelerationlateral &&
    lhs.accelerationlateral_invalidflag == rhs.accelerationlateral_invalidflag &&
    lhs.accelerationlateraleventdataqualifier == rhs.accelerationlateraleventdataqualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator1> & lhs, const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d1e6bf3d430a2b77911a476ca617783";
  }

  static const char* value(const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d1e6bf3d430a2b7ULL;
  static const uint64_t static_value2 = 0x7911a476ca617783ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/AccelerationLateralCoG";
  }

  static const char* value(const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 accelerationlateralerramp #(Unused) Error Amplitude of Lateral Acceleration \n"
"uint8 accelerationlateralerramp_invalidflag #(Unused) Invalid Flags AccelLatErrAmp  \n"
"uint8 qualifieraccelerationlateral #(Unused) Lateral Acceleration Qualifier \n"
"float32 accelerationlateral #Lateral Acceleration\n"
"uint8 accelerationlateral_invalidflag #(Unused) Invalid Flag Lateral Acceleration \n"
"uint8 accelerationlateraleventdataqualifier #(Unused) Event Data Qualifier Lateral Acceleration \n"
;
  }

  static const char* value(const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accelerationlateralerramp);
      stream.next(m.accelerationlateralerramp_invalidflag);
      stream.next(m.qualifieraccelerationlateral);
      stream.next(m.accelerationlateral);
      stream.next(m.accelerationlateral_invalidflag);
      stream.next(m.accelerationlateraleventdataqualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationLateralCoG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::AccelerationLateralCoG_<ContainerAllocator>& v)
  {
    s << indent << "accelerationlateralerramp: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationlateralerramp);
    s << indent << "accelerationlateralerramp_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlateralerramp_invalidflag);
    s << indent << "qualifieraccelerationlateral: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifieraccelerationlateral);
    s << indent << "accelerationlateral: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationlateral);
    s << indent << "accelerationlateral_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlateral_invalidflag);
    s << indent << "accelerationlateraleventdataqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlateraleventdataqualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_ACCELERATIONLATERALCOG_H
