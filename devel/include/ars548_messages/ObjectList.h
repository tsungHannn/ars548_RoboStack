// Generated by gencpp from file ars548_messages/ObjectList.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_OBJECTLIST_H
#define ARS548_MESSAGES_MESSAGE_OBJECTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ars548_messages/Object.h>

namespace ars548_messages
{
template <class ContainerAllocator>
struct ObjectList_
{
  typedef ObjectList_<ContainerAllocator> Type;

  ObjectList_()
    : header()
    , crc(0)
    , length(0)
    , sqc(0)
    , dataid(0)
    , timestamp_nanoseconds(0)
    , timestamp_seconds(0)
    , timestamp_syncstatus(0)
    , eventdataqualifier(0)
    , extendedqualifier(0)
    , objectlist_numofobjects(0)
    , objectlist_objects()  {
    }
  ObjectList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , crc(0)
    , length(0)
    , sqc(0)
    , dataid(0)
    , timestamp_nanoseconds(0)
    , timestamp_seconds(0)
    , timestamp_syncstatus(0)
    , eventdataqualifier(0)
    , extendedqualifier(0)
    , objectlist_numofobjects(0)
    , objectlist_objects()  {
  (void)_alloc;
      objectlist_objects.assign( ::ars548_messages::Object_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _crc_type;
  _crc_type crc;

   typedef uint32_t _length_type;
  _length_type length;

   typedef uint32_t _sqc_type;
  _sqc_type sqc;

   typedef uint32_t _dataid_type;
  _dataid_type dataid;

   typedef uint32_t _timestamp_nanoseconds_type;
  _timestamp_nanoseconds_type timestamp_nanoseconds;

   typedef uint32_t _timestamp_seconds_type;
  _timestamp_seconds_type timestamp_seconds;

   typedef uint8_t _timestamp_syncstatus_type;
  _timestamp_syncstatus_type timestamp_syncstatus;

   typedef uint32_t _eventdataqualifier_type;
  _eventdataqualifier_type eventdataqualifier;

   typedef uint8_t _extendedqualifier_type;
  _extendedqualifier_type extendedqualifier;

   typedef uint8_t _objectlist_numofobjects_type;
  _objectlist_numofobjects_type objectlist_numofobjects;

   typedef boost::array< ::ars548_messages::Object_<ContainerAllocator> , 50>  _objectlist_objects_type;
  _objectlist_objects_type objectlist_objects;





  typedef boost::shared_ptr< ::ars548_messages::ObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::ObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectList_

typedef ::ars548_messages::ObjectList_<std::allocator<void> > ObjectList;

typedef boost::shared_ptr< ::ars548_messages::ObjectList > ObjectListPtr;
typedef boost::shared_ptr< ::ars548_messages::ObjectList const> ObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::ObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::ObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::ObjectList_<ContainerAllocator1> & lhs, const ::ars548_messages::ObjectList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.crc == rhs.crc &&
    lhs.length == rhs.length &&
    lhs.sqc == rhs.sqc &&
    lhs.dataid == rhs.dataid &&
    lhs.timestamp_nanoseconds == rhs.timestamp_nanoseconds &&
    lhs.timestamp_seconds == rhs.timestamp_seconds &&
    lhs.timestamp_syncstatus == rhs.timestamp_syncstatus &&
    lhs.eventdataqualifier == rhs.eventdataqualifier &&
    lhs.extendedqualifier == rhs.extendedqualifier &&
    lhs.objectlist_numofobjects == rhs.objectlist_numofobjects &&
    lhs.objectlist_objects == rhs.objectlist_objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::ObjectList_<ContainerAllocator1> & lhs, const ::ars548_messages::ObjectList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::ObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::ObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::ObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::ObjectList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5aad967b1571bd050514e2ef3500c86";
  }

  static const char* value(const ::ars548_messages::ObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5aad967b1571bd0ULL;
  static const uint64_t static_value2 = 0x50514e2ef3500c86ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/ObjectList";
  }

  static const char* value(const ::ars548_messages::ObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint64 crc #Checksum (E2E Profile 7) (Reserved)\n"
"uint32 length #Len (E2E Profile 7) (Reserved)\n"
"uint32 sqc #SQC (E2E Profile 7) (Reserved)\n"
"uint32 dataid #Data ID (E2E Profile 7) (Reserved)\n"
"uint32 timestamp_nanoseconds #Timestamp Nanoseconds\n"
"uint32 timestamp_seconds #Timestamp Seconds\n"
"uint8 timestamp_syncstatus #Timestamp Sync Status\n"
"uint32 eventdataqualifier #(unused) Event Data Qualifier\n"
"uint8 extendedqualifier #(unused) Extended Qualifier \n"
"uint8 objectlist_numofobjects #Number of Objects\n"
"Object[50] objectlist_objects #Object Array\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ars548_messages/Object\n"
"uint16 u_statussensor #tbd\n"
"uint32 u_id #Unique ID of object\n"
"uint16 u_age #Age of object\n"
"uint8 u_statusmeasurement #Object Status\n"
"uint8 u_statusmovement #Object Movement Status\n"
"uint16 u_position_invalidflags #tbd\n"
"uint8 u_position_reference #Reference point position\n"
"float32 u_position_x #X Position of reference point\n"
"float32 u_position_x_std #X Position Std\n"
"float32 u_position_y #Y Position of reference point\n"
"float32 u_position_y_std #Y Position Std\n"
"float32 u_position_z #Z Position of reference point\n"
"float32 u_position_z_std #Z Position Std\n"
"float32 u_position_covariancexy #Covariance X Y\n"
"float32 u_position_orientation #Object Orientation\n"
"float32 u_position_orientation_std #Orientation Std\n"
"uint8 u_existence_invalidflags #unused\n"
"float32 u_existence_probability #Probability of Existence\n"
"float32 u_existence_ppv #unused\n"
"uint8 u_classification_car #Car Classification Probability\n"
"uint8 u_classification_truck #Truck Classification Probability\n"
"uint8 u_classification_motorcycle #Motorcycle Classification Probability\n"
"uint8 u_classification_bicycle #Bicycle Classification Probability\n"
"uint8 u_classification_pedestrian #Pedestrian Classification Probability\n"
"uint8 u_classification_animal #Animal Classification Probability\n"
"uint8 u_classification_hazard #Hazard Classification Probability\n"
"uint8 u_classification_unknown #Unknown Classification Probability\n"
"uint8 u_classification_overdrivable #unused\n"
"uint8 u_classification_underdrivable #unused\n"
"uint8 u_dynamics_absvel_invalidflags #unused\n"
"float32 f_dynamics_absvel_x #X Absolute Velocity\n"
"float32 f_dynamics_absvel_x_std #X Absolute Velocity Std\n"
"float32 f_dynamics_absvel_y #Y Absolute Velocity\n"
"float32 f_dynamics_absvel_y_std #Y Absolute Velocity Std\n"
"float32 f_dynamics_absvel_covariancexy #Covariance Absolute Velocity X Y\n"
"uint8 u_dynamics_relvel_invalidflags #unused\n"
"float32 f_dynamics_relvel_x #X Relative Velocity\n"
"float32 f_dynamics_relvel_x_std #X Relative Velocity Std\n"
"float32 f_dynamics_relvel_y #Y Relative Velocity\n"
"float32 f_dynamics_relvel_y_std #Y Relative Velocity Std\n"
"float32 f_dynamics_relvel_covariancexy #Covariance Relative Velocity X Y\n"
"uint8 u_dynamics_absaccel_invalidflags #unused\n"
"float32 f_dynamics_absaccel_x #X Absolute Acceleration\n"
"float32 f_dynamics_absaccel_x_std #X Absolute Acceleration Std\n"
"float32 f_dynamics_absaccel_y #Y Absolute Acceleration\n"
"float32 f_dynamics_absaccel_y_std #Y Absolute Acceleration Std\n"
"float32 f_dynamics_absaccel_covariancexy #Covariance Absolute Acceleration X Y\n"
"uint8 u_dynamics_relaccel_invalidflags #unused\n"
"float32 f_dynamics_relaccel_x #X Relative Acceleration\n"
"float32 f_dynamics_relaccel_x_std #X Relative Acceleration Std\n"
"float32 f_dynamics_relaccel_y #Y Relative Acceleration\n"
"float32 f_dynamics_relaccel_y_std #Y Relative Acceleration Std\n"
"float32 f_dynamics_relaccel_covariancexy #Covariance Relative Acceleration X Y\n"
"uint8 u_dynamics_orientation_invalidflags #unused\n"
"float32 u_dynamics_orientation_rate_mean #Object Orientation Rate\n"
"float32 u_dynamics_orientation_rate_std #Orientation Rate Std\n"
"uint32 u_shape_length_status #(unused) Shape Length Status\n"
"uint8 u_shape_length_edge_invalidflags #(unused) Invalid Flags Shape Length \n"
"float32 u_shape_length_edge_mean #Mean Shape Length\n"
"float32 u_shape_length_edge_std #(unused) Shape Length Std\n"
"uint32 u_shape_width_status #(unused) Shape Width Status \n"
"uint8 u_shape_width_edge_invalidflags #(unused) Invalid Flags Shape Width\n"
"float32 u_shape_width_edge_mean #Mean Shape Width\n"
"float32 u_shape_width_edge_std #(unused) Shape Width Std \n"
;
  }

  static const char* value(const ::ars548_messages::ObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::ObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.crc);
      stream.next(m.length);
      stream.next(m.sqc);
      stream.next(m.dataid);
      stream.next(m.timestamp_nanoseconds);
      stream.next(m.timestamp_seconds);
      stream.next(m.timestamp_syncstatus);
      stream.next(m.eventdataqualifier);
      stream.next(m.extendedqualifier);
      stream.next(m.objectlist_numofobjects);
      stream.next(m.objectlist_objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::ObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::ObjectList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "crc: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.crc);
    s << indent << "length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.length);
    s << indent << "sqc: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sqc);
    s << indent << "dataid: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dataid);
    s << indent << "timestamp_nanoseconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_nanoseconds);
    s << indent << "timestamp_seconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_seconds);
    s << indent << "timestamp_syncstatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timestamp_syncstatus);
    s << indent << "eventdataqualifier: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.eventdataqualifier);
    s << indent << "extendedqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extendedqualifier);
    s << indent << "objectlist_numofobjects: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.objectlist_numofobjects);
    s << indent << "objectlist_objects[]" << std::endl;
    for (size_t i = 0; i < v.objectlist_objects.size(); ++i)
    {
      s << indent << "  objectlist_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ars548_messages::Object_<ContainerAllocator> >::stream(s, indent + "    ", v.objectlist_objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_OBJECTLIST_H
