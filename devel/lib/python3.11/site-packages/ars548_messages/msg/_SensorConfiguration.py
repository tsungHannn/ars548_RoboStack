# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/SensorConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorConfiguration(genpy.Message):
  _md5sum = "431839fe505be3082a74c763bbc714ec"
  _type = "ars548_messages/SensorConfiguration"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 longitudinal #Longitudinal sensor position (AUTOSAR)
float32 lateral #Lateral sensor position (AUTOSAR)
float32 vertical #Vertical sensor position (AUTOSAR)
float32 yaw #Sensor yaw angle (AUTOSAR)
float32 pitch #Sensor pitch angle (AUTOSAR)
uint8 plugorientation #Orientation of plug
float32 length #Vehicle length
float32 width #Vehicle width
float32 height #Vehicle height
float32 wheelbase #Vehicle wheelbase
uint16 maximumdistance #Maximum detection distance
uint8 frequencslot #Center frequency (if MaximumDistance < 190 m only Mid can be selected)
uint8 cycletime #Cycle time
uint8 timeslot #Cycle offset
uint8 hcc #Country code
uint8 powersave_standstill #Power saving in standstill
uint32 sensoripaddress_0 #Sensor IP address
uint32 sensoripaddress_1 #Reserved (Configure as 2852025457 or 169.254.116.113)
uint8 newsensormounting #Flag if new sensor mounting position shall be configured
uint8 newvehicleparameters #Flag if new vehicle parameters position shall be configured
uint8 newradarparameters #Flag if new radar parameter shall be configured
uint8 newnetworkconfiguration # Flag if new IP address shall be configured
"""
  __slots__ = ['longitudinal','lateral','vertical','yaw','pitch','plugorientation','length','width','height','wheelbase','maximumdistance','frequencslot','cycletime','timeslot','hcc','powersave_standstill','sensoripaddress_0','sensoripaddress_1','newsensormounting','newvehicleparameters','newradarparameters','newnetworkconfiguration']
  _slot_types = ['float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','uint16','uint8','uint8','uint8','uint8','uint8','uint32','uint32','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       longitudinal,lateral,vertical,yaw,pitch,plugorientation,length,width,height,wheelbase,maximumdistance,frequencslot,cycletime,timeslot,hcc,powersave_standstill,sensoripaddress_0,sensoripaddress_1,newsensormounting,newvehicleparameters,newradarparameters,newnetworkconfiguration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.longitudinal is None:
        self.longitudinal = 0.
      if self.lateral is None:
        self.lateral = 0.
      if self.vertical is None:
        self.vertical = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.plugorientation is None:
        self.plugorientation = 0
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.wheelbase is None:
        self.wheelbase = 0.
      if self.maximumdistance is None:
        self.maximumdistance = 0
      if self.frequencslot is None:
        self.frequencslot = 0
      if self.cycletime is None:
        self.cycletime = 0
      if self.timeslot is None:
        self.timeslot = 0
      if self.hcc is None:
        self.hcc = 0
      if self.powersave_standstill is None:
        self.powersave_standstill = 0
      if self.sensoripaddress_0 is None:
        self.sensoripaddress_0 = 0
      if self.sensoripaddress_1 is None:
        self.sensoripaddress_1 = 0
      if self.newsensormounting is None:
        self.newsensormounting = 0
      if self.newvehicleparameters is None:
        self.newvehicleparameters = 0
      if self.newradarparameters is None:
        self.newradarparameters = 0
      if self.newnetworkconfiguration is None:
        self.newnetworkconfiguration = 0
    else:
      self.longitudinal = 0.
      self.lateral = 0.
      self.vertical = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.plugorientation = 0
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.wheelbase = 0.
      self.maximumdistance = 0
      self.frequencslot = 0
      self.cycletime = 0
      self.timeslot = 0
      self.hcc = 0
      self.powersave_standstill = 0
      self.sensoripaddress_0 = 0
      self.sensoripaddress_1 = 0
      self.newsensormounting = 0
      self.newvehicleparameters = 0
      self.newradarparameters = 0
      self.newnetworkconfiguration = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5fB4fH5B2I4B().pack(_x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximumdistance, _x.frequencslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.newsensormounting, _x.newvehicleparameters, _x.newradarparameters, _x.newnetworkconfiguration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximumdistance, _x.frequencslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.newsensormounting, _x.newvehicleparameters, _x.newradarparameters, _x.newnetworkconfiguration,) = _get_struct_5fB4fH5B2I4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5fB4fH5B2I4B().pack(_x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximumdistance, _x.frequencslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.newsensormounting, _x.newvehicleparameters, _x.newradarparameters, _x.newnetworkconfiguration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximumdistance, _x.frequencslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.newsensormounting, _x.newvehicleparameters, _x.newradarparameters, _x.newnetworkconfiguration,) = _get_struct_5fB4fH5B2I4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5fB4fH5B2I4B = None
def _get_struct_5fB4fH5B2I4B():
    global _struct_5fB4fH5B2I4B
    if _struct_5fB4fH5B2I4B is None:
        _struct_5fB4fH5B2I4B = struct.Struct("<5fB4fH5B2I4B")
    return _struct_5fB4fH5B2I4B
