// Generated by gencpp from file ars548_messages/YawRate.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_YAWRATE_H
#define ARS548_MESSAGES_MESSAGE_YAWRATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct YawRate_
{
  typedef YawRate_<ContainerAllocator> Type;

  YawRate_()
    : yawrateerramp(0.0)
    , yawrateerramp_invalidflag(0)
    , qualifieryawrate(0)
    , yawrate(0.0)
    , yawrate_invalidflag(0)
    , yawrateeventdataqualifier(0)  {
    }
  YawRate_(const ContainerAllocator& _alloc)
    : yawrateerramp(0.0)
    , yawrateerramp_invalidflag(0)
    , qualifieryawrate(0)
    , yawrate(0.0)
    , yawrate_invalidflag(0)
    , yawrateeventdataqualifier(0)  {
  (void)_alloc;
    }



   typedef float _yawrateerramp_type;
  _yawrateerramp_type yawrateerramp;

   typedef uint8_t _yawrateerramp_invalidflag_type;
  _yawrateerramp_invalidflag_type yawrateerramp_invalidflag;

   typedef uint8_t _qualifieryawrate_type;
  _qualifieryawrate_type qualifieryawrate;

   typedef float _yawrate_type;
  _yawrate_type yawrate;

   typedef uint8_t _yawrate_invalidflag_type;
  _yawrate_invalidflag_type yawrate_invalidflag;

   typedef uint8_t _yawrateeventdataqualifier_type;
  _yawrateeventdataqualifier_type yawrateeventdataqualifier;





  typedef boost::shared_ptr< ::ars548_messages::YawRate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::YawRate_<ContainerAllocator> const> ConstPtr;

}; // struct YawRate_

typedef ::ars548_messages::YawRate_<std::allocator<void> > YawRate;

typedef boost::shared_ptr< ::ars548_messages::YawRate > YawRatePtr;
typedef boost::shared_ptr< ::ars548_messages::YawRate const> YawRateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::YawRate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::YawRate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::YawRate_<ContainerAllocator1> & lhs, const ::ars548_messages::YawRate_<ContainerAllocator2> & rhs)
{
  return lhs.yawrateerramp == rhs.yawrateerramp &&
    lhs.yawrateerramp_invalidflag == rhs.yawrateerramp_invalidflag &&
    lhs.qualifieryawrate == rhs.qualifieryawrate &&
    lhs.yawrate == rhs.yawrate &&
    lhs.yawrate_invalidflag == rhs.yawrate_invalidflag &&
    lhs.yawrateeventdataqualifier == rhs.yawrateeventdataqualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::YawRate_<ContainerAllocator1> & lhs, const ::ars548_messages::YawRate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::YawRate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::YawRate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::YawRate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::YawRate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::YawRate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::YawRate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::YawRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e5ee89741e00a755558196ad380378e";
  }

  static const char* value(const ::ars548_messages::YawRate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e5ee89741e00a75ULL;
  static const uint64_t static_value2 = 0x5558196ad380378eULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::YawRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/YawRate";
  }

  static const char* value(const ::ars548_messages::YawRate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::YawRate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yawrateerramp #(Unused) Error Amplitude of YawRate\n"
"uint8 yawrateerramp_invalidflag #(Unused) Invalid flags AccelLatErrAmp\n"
"uint8 qualifieryawrate #(Unused) YawRate qualifier\n"
"float32 yawrate #YawRate\n"
"uint8 yawrate_invalidflag #(Unused) Invalid flag Yaw Rate \n"
"uint8 yawrateeventdataqualifier #(Unused) Event data qualifier YawRate\n"
;
  }

  static const char* value(const ::ars548_messages::YawRate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::YawRate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yawrateerramp);
      stream.next(m.yawrateerramp_invalidflag);
      stream.next(m.qualifieryawrate);
      stream.next(m.yawrate);
      stream.next(m.yawrate_invalidflag);
      stream.next(m.yawrateeventdataqualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YawRate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::YawRate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::YawRate_<ContainerAllocator>& v)
  {
    s << indent << "yawrateerramp: ";
    Printer<float>::stream(s, indent + "  ", v.yawrateerramp);
    s << indent << "yawrateerramp_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yawrateerramp_invalidflag);
    s << indent << "qualifieryawrate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifieryawrate);
    s << indent << "yawrate: ";
    Printer<float>::stream(s, indent + "  ", v.yawrate);
    s << indent << "yawrate_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yawrate_invalidflag);
    s << indent << "yawrateeventdataqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yawrateeventdataqualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_YAWRATE_H
