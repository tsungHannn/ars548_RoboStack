// Generated by gencpp from file ars548_messages/CharacteristicSpeed.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_CHARACTERISTICSPEED_H
#define ARS548_MESSAGES_MESSAGE_CHARACTERISTICSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct CharacteristicSpeed_
{
  typedef CharacteristicSpeed_<ContainerAllocator> Type;

  CharacteristicSpeed_()
    : characteristicspeederramp(0)
    , qualifiercharacteristicspeed(0)
    , characteristicspeed(0)  {
    }
  CharacteristicSpeed_(const ContainerAllocator& _alloc)
    : characteristicspeederramp(0)
    , qualifiercharacteristicspeed(0)
    , characteristicspeed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _characteristicspeederramp_type;
  _characteristicspeederramp_type characteristicspeederramp;

   typedef uint8_t _qualifiercharacteristicspeed_type;
  _qualifiercharacteristicspeed_type qualifiercharacteristicspeed;

   typedef uint8_t _characteristicspeed_type;
  _characteristicspeed_type characteristicspeed;





  typedef boost::shared_ptr< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct CharacteristicSpeed_

typedef ::ars548_messages::CharacteristicSpeed_<std::allocator<void> > CharacteristicSpeed;

typedef boost::shared_ptr< ::ars548_messages::CharacteristicSpeed > CharacteristicSpeedPtr;
typedef boost::shared_ptr< ::ars548_messages::CharacteristicSpeed const> CharacteristicSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator1> & lhs, const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.characteristicspeederramp == rhs.characteristicspeederramp &&
    lhs.qualifiercharacteristicspeed == rhs.qualifiercharacteristicspeed &&
    lhs.characteristicspeed == rhs.characteristicspeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator1> & lhs, const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08f85cc48916f7bc1371d09df58338bd";
  }

  static const char* value(const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08f85cc48916f7bcULL;
  static const uint64_t static_value2 = 0x1371d09df58338bdULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/CharacteristicSpeed";
  }

  static const char* value(const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 characteristicspeederramp #(Unused) Error amplitude of characteristic speed\n"
"uint8  qualifiercharacteristicspeed #(Unused) Characteristic speed qualifier\n"
"uint8 characteristicspeed # Characteristic speed\n"
;
  }

  static const char* value(const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.characteristicspeederramp);
      stream.next(m.qualifiercharacteristicspeed);
      stream.next(m.characteristicspeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CharacteristicSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::CharacteristicSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::CharacteristicSpeed_<ContainerAllocator>& v)
  {
    s << indent << "characteristicspeederramp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.characteristicspeederramp);
    s << indent << "qualifiercharacteristicspeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifiercharacteristicspeed);
    s << indent << "characteristicspeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.characteristicspeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_CHARACTERISTICSPEED_H
