# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/ObjectList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ars548_messages.msg
import std_msgs.msg

class ObjectList(genpy.Message):
  _md5sum = "c5aad967b1571bd050514e2ef3500c86"
  _type = "ars548_messages/ObjectList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint64 crc #Checksum (E2E Profile 7) (Reserved)
uint32 length #Len (E2E Profile 7) (Reserved)
uint32 sqc #SQC (E2E Profile 7) (Reserved)
uint32 dataid #Data ID (E2E Profile 7) (Reserved)
uint32 timestamp_nanoseconds #Timestamp Nanoseconds
uint32 timestamp_seconds #Timestamp Seconds
uint8 timestamp_syncstatus #Timestamp Sync Status
uint32 eventdataqualifier #(unused) Event Data Qualifier
uint8 extendedqualifier #(unused) Extended Qualifier 
uint8 objectlist_numofobjects #Number of Objects
Object[50] objectlist_objects #Object Array
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ars548_messages/Object
uint16 u_statussensor #tbd
uint32 u_id #Unique ID of object
uint16 u_age #Age of object
uint8 u_statusmeasurement #Object Status
uint8 u_statusmovement #Object Movement Status
uint16 u_position_invalidflags #tbd
uint8 u_position_reference #Reference point position
float32 u_position_x #X Position of reference point
float32 u_position_x_std #X Position Std
float32 u_position_y #Y Position of reference point
float32 u_position_y_std #Y Position Std
float32 u_position_z #Z Position of reference point
float32 u_position_z_std #Z Position Std
float32 u_position_covariancexy #Covariance X Y
float32 u_position_orientation #Object Orientation
float32 u_position_orientation_std #Orientation Std
uint8 u_existence_invalidflags #unused
float32 u_existence_probability #Probability of Existence
float32 u_existence_ppv #unused
uint8 u_classification_car #Car Classification Probability
uint8 u_classification_truck #Truck Classification Probability
uint8 u_classification_motorcycle #Motorcycle Classification Probability
uint8 u_classification_bicycle #Bicycle Classification Probability
uint8 u_classification_pedestrian #Pedestrian Classification Probability
uint8 u_classification_animal #Animal Classification Probability
uint8 u_classification_hazard #Hazard Classification Probability
uint8 u_classification_unknown #Unknown Classification Probability
uint8 u_classification_overdrivable #unused
uint8 u_classification_underdrivable #unused
uint8 u_dynamics_absvel_invalidflags #unused
float32 f_dynamics_absvel_x #X Absolute Velocity
float32 f_dynamics_absvel_x_std #X Absolute Velocity Std
float32 f_dynamics_absvel_y #Y Absolute Velocity
float32 f_dynamics_absvel_y_std #Y Absolute Velocity Std
float32 f_dynamics_absvel_covariancexy #Covariance Absolute Velocity X Y
uint8 u_dynamics_relvel_invalidflags #unused
float32 f_dynamics_relvel_x #X Relative Velocity
float32 f_dynamics_relvel_x_std #X Relative Velocity Std
float32 f_dynamics_relvel_y #Y Relative Velocity
float32 f_dynamics_relvel_y_std #Y Relative Velocity Std
float32 f_dynamics_relvel_covariancexy #Covariance Relative Velocity X Y
uint8 u_dynamics_absaccel_invalidflags #unused
float32 f_dynamics_absaccel_x #X Absolute Acceleration
float32 f_dynamics_absaccel_x_std #X Absolute Acceleration Std
float32 f_dynamics_absaccel_y #Y Absolute Acceleration
float32 f_dynamics_absaccel_y_std #Y Absolute Acceleration Std
float32 f_dynamics_absaccel_covariancexy #Covariance Absolute Acceleration X Y
uint8 u_dynamics_relaccel_invalidflags #unused
float32 f_dynamics_relaccel_x #X Relative Acceleration
float32 f_dynamics_relaccel_x_std #X Relative Acceleration Std
float32 f_dynamics_relaccel_y #Y Relative Acceleration
float32 f_dynamics_relaccel_y_std #Y Relative Acceleration Std
float32 f_dynamics_relaccel_covariancexy #Covariance Relative Acceleration X Y
uint8 u_dynamics_orientation_invalidflags #unused
float32 u_dynamics_orientation_rate_mean #Object Orientation Rate
float32 u_dynamics_orientation_rate_std #Orientation Rate Std
uint32 u_shape_length_status #(unused) Shape Length Status
uint8 u_shape_length_edge_invalidflags #(unused) Invalid Flags Shape Length 
float32 u_shape_length_edge_mean #Mean Shape Length
float32 u_shape_length_edge_std #(unused) Shape Length Std
uint32 u_shape_width_status #(unused) Shape Width Status 
uint8 u_shape_width_edge_invalidflags #(unused) Invalid Flags Shape Width
float32 u_shape_width_edge_mean #Mean Shape Width
float32 u_shape_width_edge_std #(unused) Shape Width Std """
  __slots__ = ['header','crc','length','sqc','dataid','timestamp_nanoseconds','timestamp_seconds','timestamp_syncstatus','eventdataqualifier','extendedqualifier','objectlist_numofobjects','objectlist_objects']
  _slot_types = ['std_msgs/Header','uint64','uint32','uint32','uint32','uint32','uint32','uint8','uint32','uint8','uint8','ars548_messages/Object[50]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,crc,length,sqc,dataid,timestamp_nanoseconds,timestamp_seconds,timestamp_syncstatus,eventdataqualifier,extendedqualifier,objectlist_numofobjects,objectlist_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.crc is None:
        self.crc = 0
      if self.length is None:
        self.length = 0
      if self.sqc is None:
        self.sqc = 0
      if self.dataid is None:
        self.dataid = 0
      if self.timestamp_nanoseconds is None:
        self.timestamp_nanoseconds = 0
      if self.timestamp_seconds is None:
        self.timestamp_seconds = 0
      if self.timestamp_syncstatus is None:
        self.timestamp_syncstatus = 0
      if self.eventdataqualifier is None:
        self.eventdataqualifier = 0
      if self.extendedqualifier is None:
        self.extendedqualifier = 0
      if self.objectlist_numofobjects is None:
        self.objectlist_numofobjects = 0
      if self.objectlist_objects is None:
        self.objectlist_objects = [ars548_messages.msg.Object() for _ in range(50)]
    else:
      self.header = std_msgs.msg.Header()
      self.crc = 0
      self.length = 0
      self.sqc = 0
      self.dataid = 0
      self.timestamp_nanoseconds = 0
      self.timestamp_seconds = 0
      self.timestamp_syncstatus = 0
      self.eventdataqualifier = 0
      self.extendedqualifier = 0
      self.objectlist_numofobjects = 0
      self.objectlist_objects = [ars548_messages.msg.Object() for _ in range(50)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q5IBI2B().pack(_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.objectlist_numofobjects))
      if len(self.objectlist_objects) != 50:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (50, len(self.objectlist_objects), 'self.objectlist_objects')))
      for val1 in self.objectlist_objects:
        _x = val1
        buff.write(_get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().pack(_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objectlist_objects is None:
        self.objectlist_objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.objectlist_numofobjects,) = _get_struct_Q5IBI2B().unpack(str[start:end])
      self.objectlist_objects = []
      for i in range(0, 50):
        val1 = ars548_messages.msg.Object()
        _x = val1
        start = end
        end += 187
        (_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std,) = _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().unpack(str[start:end])
        self.objectlist_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q5IBI2B().pack(_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.objectlist_numofobjects))
      if len(self.objectlist_objects) != 50:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (50, len(self.objectlist_objects), 'self.objectlist_objects')))
      for val1 in self.objectlist_objects:
        _x = val1
        buff.write(_get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().pack(_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objectlist_objects is None:
        self.objectlist_objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.objectlist_numofobjects,) = _get_struct_Q5IBI2B().unpack(str[start:end])
      self.objectlist_objects = []
      for i in range(0, 50):
        val1 = ars548_messages.msg.Object()
        _x = val1
        start = end
        end += 187
        (_x.u_statussensor, _x.u_id, _x.u_age, _x.u_statusmeasurement, _x.u_statusmovement, _x.u_position_invalidflags, _x.u_position_reference, _x.u_position_x, _x.u_position_x_std, _x.u_position_y, _x.u_position_y_std, _x.u_position_z, _x.u_position_z_std, _x.u_position_covariancexy, _x.u_position_orientation, _x.u_position_orientation_std, _x.u_existence_invalidflags, _x.u_existence_probability, _x.u_existence_ppv, _x.u_classification_car, _x.u_classification_truck, _x.u_classification_motorcycle, _x.u_classification_bicycle, _x.u_classification_pedestrian, _x.u_classification_animal, _x.u_classification_hazard, _x.u_classification_unknown, _x.u_classification_overdrivable, _x.u_classification_underdrivable, _x.u_dynamics_absvel_invalidflags, _x.f_dynamics_absvel_x, _x.f_dynamics_absvel_x_std, _x.f_dynamics_absvel_y, _x.f_dynamics_absvel_y_std, _x.f_dynamics_absvel_covariancexy, _x.u_dynamics_relvel_invalidflags, _x.f_dynamics_relvel_x, _x.f_dynamics_relvel_x_std, _x.f_dynamics_relvel_y, _x.f_dynamics_relvel_y_std, _x.f_dynamics_relvel_covariancexy, _x.u_dynamics_absaccel_invalidflags, _x.f_dynamics_absaccel_x, _x.f_dynamics_absaccel_x_std, _x.f_dynamics_absaccel_y, _x.f_dynamics_absaccel_y_std, _x.f_dynamics_absaccel_covariancexy, _x.u_dynamics_relaccel_invalidflags, _x.f_dynamics_relaccel_x, _x.f_dynamics_relaccel_x_std, _x.f_dynamics_relaccel_y, _x.f_dynamics_relaccel_y_std, _x.f_dynamics_relaccel_covariancexy, _x.u_dynamics_orientation_invalidflags, _x.u_dynamics_orientation_rate_mean, _x.u_dynamics_orientation_rate_std, _x.u_shape_length_status, _x.u_shape_length_edge_invalidflags, _x.u_shape_length_edge_mean, _x.u_shape_length_edge_std, _x.u_shape_width_status, _x.u_shape_width_edge_invalidflags, _x.u_shape_width_edge_mean, _x.u_shape_width_edge_std,) = _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f().unpack(str[start:end])
        self.objectlist_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f = None
def _get_struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f():
    global _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f
    if _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f is None:
        _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f = struct.Struct("<HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f")
    return _struct_HIH2BHB9fB2f11B5fB5fB5fB5fB2fIB2fIB2f
_struct_Q5IBI2B = None
def _get_struct_Q5IBI2B():
    global _struct_Q5IBI2B
    if _struct_Q5IBI2B is None:
        _struct_Q5IBI2B = struct.Struct("<Q5IBI2B")
    return _struct_Q5IBI2B
