# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/Detection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Detection(genpy.Message):
  _md5sum = "3760b05dc425bea9898067baeb462326"
  _type = "ars548_messages/Detection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 f_azimuthangle #Unaligned Detection Azimuth Angle
float32 f_azimuthanglestd #Azimuth Angle Std
uint8 u_invalidflags #Detection Invalid Flags 
float32 f_elevationangle #Unaligned Detection Elevation Angle
float32 f_elevationanglestd #Elevation Angle Std
float32 f_range #Detection Radial Distance
float32 f_rangestd #Radial Distance Std
float32 f_rangerate #Detection Radial Velocity
float32 f_rangeratestd #Radial Velocity Std
int8 s_rcs #Detection RCS
uint16 u_measurementid #Detection ID
uint8 u_positivepredictivevalue #Existence Probability
uint8 u_classification #Detection Classification
uint8 u_multitargetprobabilitym #Multi-Target Probability
uint16 u_objectid #Associated Object ID
uint8 u_ambiguityflag #Probability for resolved velocity ambiguity
uint16 u_sortindex #tbd"""
  __slots__ = ['f_azimuthangle','f_azimuthanglestd','u_invalidflags','f_elevationangle','f_elevationanglestd','f_range','f_rangestd','f_rangerate','f_rangeratestd','s_rcs','u_measurementid','u_positivepredictivevalue','u_classification','u_multitargetprobabilitym','u_objectid','u_ambiguityflag','u_sortindex']
  _slot_types = ['float32','float32','uint8','float32','float32','float32','float32','float32','float32','int8','uint16','uint8','uint8','uint8','uint16','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       f_azimuthangle,f_azimuthanglestd,u_invalidflags,f_elevationangle,f_elevationanglestd,f_range,f_rangestd,f_rangerate,f_rangeratestd,s_rcs,u_measurementid,u_positivepredictivevalue,u_classification,u_multitargetprobabilitym,u_objectid,u_ambiguityflag,u_sortindex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Detection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.f_azimuthangle is None:
        self.f_azimuthangle = 0.
      if self.f_azimuthanglestd is None:
        self.f_azimuthanglestd = 0.
      if self.u_invalidflags is None:
        self.u_invalidflags = 0
      if self.f_elevationangle is None:
        self.f_elevationangle = 0.
      if self.f_elevationanglestd is None:
        self.f_elevationanglestd = 0.
      if self.f_range is None:
        self.f_range = 0.
      if self.f_rangestd is None:
        self.f_rangestd = 0.
      if self.f_rangerate is None:
        self.f_rangerate = 0.
      if self.f_rangeratestd is None:
        self.f_rangeratestd = 0.
      if self.s_rcs is None:
        self.s_rcs = 0
      if self.u_measurementid is None:
        self.u_measurementid = 0
      if self.u_positivepredictivevalue is None:
        self.u_positivepredictivevalue = 0
      if self.u_classification is None:
        self.u_classification = 0
      if self.u_multitargetprobabilitym is None:
        self.u_multitargetprobabilitym = 0
      if self.u_objectid is None:
        self.u_objectid = 0
      if self.u_ambiguityflag is None:
        self.u_ambiguityflag = 0
      if self.u_sortindex is None:
        self.u_sortindex = 0
    else:
      self.f_azimuthangle = 0.
      self.f_azimuthanglestd = 0.
      self.u_invalidflags = 0
      self.f_elevationangle = 0.
      self.f_elevationanglestd = 0.
      self.f_range = 0.
      self.f_rangestd = 0.
      self.f_rangerate = 0.
      self.f_rangeratestd = 0.
      self.s_rcs = 0
      self.u_measurementid = 0
      self.u_positivepredictivevalue = 0
      self.u_classification = 0
      self.u_multitargetprobabilitym = 0
      self.u_objectid = 0
      self.u_ambiguityflag = 0
      self.u_sortindex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fB6fbH3BHBH().pack(_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex,) = _get_struct_2fB6fbH3BHBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fB6fbH3BHBH().pack(_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex,) = _get_struct_2fB6fbH3BHBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB6fbH3BHBH = None
def _get_struct_2fB6fbH3BHBH():
    global _struct_2fB6fbH3BHBH
    if _struct_2fB6fbH3BHBH is None:
        _struct_2fB6fbH3BHBH = struct.Struct("<2fB6fbH3BHBH")
    return _struct_2fB6fbH3BHBH
