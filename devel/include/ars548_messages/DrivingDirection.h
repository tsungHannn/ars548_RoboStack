// Generated by gencpp from file ars548_messages/DrivingDirection.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_DRIVINGDIRECTION_H
#define ARS548_MESSAGES_MESSAGE_DRIVINGDIRECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct DrivingDirection_
{
  typedef DrivingDirection_<ContainerAllocator> Type;

  DrivingDirection_()
    : drivingdirectionunconfirmed(0)
    , drivingdirectionconfirmed(0)  {
    }
  DrivingDirection_(const ContainerAllocator& _alloc)
    : drivingdirectionunconfirmed(0)
    , drivingdirectionconfirmed(0)  {
  (void)_alloc;
    }



   typedef uint8_t _drivingdirectionunconfirmed_type;
  _drivingdirectionunconfirmed_type drivingdirectionunconfirmed;

   typedef uint8_t _drivingdirectionconfirmed_type;
  _drivingdirectionconfirmed_type drivingdirectionconfirmed;





  typedef boost::shared_ptr< ::ars548_messages::DrivingDirection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::DrivingDirection_<ContainerAllocator> const> ConstPtr;

}; // struct DrivingDirection_

typedef ::ars548_messages::DrivingDirection_<std::allocator<void> > DrivingDirection;

typedef boost::shared_ptr< ::ars548_messages::DrivingDirection > DrivingDirectionPtr;
typedef boost::shared_ptr< ::ars548_messages::DrivingDirection const> DrivingDirectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::DrivingDirection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::DrivingDirection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::DrivingDirection_<ContainerAllocator1> & lhs, const ::ars548_messages::DrivingDirection_<ContainerAllocator2> & rhs)
{
  return lhs.drivingdirectionunconfirmed == rhs.drivingdirectionunconfirmed &&
    lhs.drivingdirectionconfirmed == rhs.drivingdirectionconfirmed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::DrivingDirection_<ContainerAllocator1> & lhs, const ::ars548_messages::DrivingDirection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::DrivingDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::DrivingDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::DrivingDirection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca13186e93f09072774d4d57d6065639";
  }

  static const char* value(const ::ars548_messages::DrivingDirection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca13186e93f09072ULL;
  static const uint64_t static_value2 = 0x774d4d57d6065639ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/DrivingDirection";
  }

  static const char* value(const ::ars548_messages::DrivingDirection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 drivingdirectionunconfirmed #(unused) Unconfirmed driving direction\n"
"uint8 drivingdirectionconfirmed # Confirmed driving direction\n"
;
  }

  static const char* value(const ::ars548_messages::DrivingDirection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drivingdirectionunconfirmed);
      stream.next(m.drivingdirectionconfirmed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DrivingDirection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::DrivingDirection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::DrivingDirection_<ContainerAllocator>& v)
  {
    s << indent << "drivingdirectionunconfirmed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drivingdirectionunconfirmed);
    s << indent << "drivingdirectionconfirmed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drivingdirectionconfirmed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_DRIVINGDIRECTION_H
