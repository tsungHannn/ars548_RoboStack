// Generated by gencpp from file ars548_messages/Detection.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_DETECTION_H
#define ARS548_MESSAGES_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : f_azimuthangle(0.0)
    , f_azimuthanglestd(0.0)
    , u_invalidflags(0)
    , f_elevationangle(0.0)
    , f_elevationanglestd(0.0)
    , f_range(0.0)
    , f_rangestd(0.0)
    , f_rangerate(0.0)
    , f_rangeratestd(0.0)
    , s_rcs(0)
    , u_measurementid(0)
    , u_positivepredictivevalue(0)
    , u_classification(0)
    , u_multitargetprobabilitym(0)
    , u_objectid(0)
    , u_ambiguityflag(0)
    , u_sortindex(0)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : f_azimuthangle(0.0)
    , f_azimuthanglestd(0.0)
    , u_invalidflags(0)
    , f_elevationangle(0.0)
    , f_elevationanglestd(0.0)
    , f_range(0.0)
    , f_rangestd(0.0)
    , f_rangerate(0.0)
    , f_rangeratestd(0.0)
    , s_rcs(0)
    , u_measurementid(0)
    , u_positivepredictivevalue(0)
    , u_classification(0)
    , u_multitargetprobabilitym(0)
    , u_objectid(0)
    , u_ambiguityflag(0)
    , u_sortindex(0)  {
  (void)_alloc;
    }



   typedef float _f_azimuthangle_type;
  _f_azimuthangle_type f_azimuthangle;

   typedef float _f_azimuthanglestd_type;
  _f_azimuthanglestd_type f_azimuthanglestd;

   typedef uint8_t _u_invalidflags_type;
  _u_invalidflags_type u_invalidflags;

   typedef float _f_elevationangle_type;
  _f_elevationangle_type f_elevationangle;

   typedef float _f_elevationanglestd_type;
  _f_elevationanglestd_type f_elevationanglestd;

   typedef float _f_range_type;
  _f_range_type f_range;

   typedef float _f_rangestd_type;
  _f_rangestd_type f_rangestd;

   typedef float _f_rangerate_type;
  _f_rangerate_type f_rangerate;

   typedef float _f_rangeratestd_type;
  _f_rangeratestd_type f_rangeratestd;

   typedef int8_t _s_rcs_type;
  _s_rcs_type s_rcs;

   typedef uint16_t _u_measurementid_type;
  _u_measurementid_type u_measurementid;

   typedef uint8_t _u_positivepredictivevalue_type;
  _u_positivepredictivevalue_type u_positivepredictivevalue;

   typedef uint8_t _u_classification_type;
  _u_classification_type u_classification;

   typedef uint8_t _u_multitargetprobabilitym_type;
  _u_multitargetprobabilitym_type u_multitargetprobabilitym;

   typedef uint16_t _u_objectid_type;
  _u_objectid_type u_objectid;

   typedef uint8_t _u_ambiguityflag_type;
  _u_ambiguityflag_type u_ambiguityflag;

   typedef uint16_t _u_sortindex_type;
  _u_sortindex_type u_sortindex;





  typedef boost::shared_ptr< ::ars548_messages::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::ars548_messages::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::ars548_messages::Detection > DetectionPtr;
typedef boost::shared_ptr< ::ars548_messages::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::Detection_<ContainerAllocator1> & lhs, const ::ars548_messages::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.f_azimuthangle == rhs.f_azimuthangle &&
    lhs.f_azimuthanglestd == rhs.f_azimuthanglestd &&
    lhs.u_invalidflags == rhs.u_invalidflags &&
    lhs.f_elevationangle == rhs.f_elevationangle &&
    lhs.f_elevationanglestd == rhs.f_elevationanglestd &&
    lhs.f_range == rhs.f_range &&
    lhs.f_rangestd == rhs.f_rangestd &&
    lhs.f_rangerate == rhs.f_rangerate &&
    lhs.f_rangeratestd == rhs.f_rangeratestd &&
    lhs.s_rcs == rhs.s_rcs &&
    lhs.u_measurementid == rhs.u_measurementid &&
    lhs.u_positivepredictivevalue == rhs.u_positivepredictivevalue &&
    lhs.u_classification == rhs.u_classification &&
    lhs.u_multitargetprobabilitym == rhs.u_multitargetprobabilitym &&
    lhs.u_objectid == rhs.u_objectid &&
    lhs.u_ambiguityflag == rhs.u_ambiguityflag &&
    lhs.u_sortindex == rhs.u_sortindex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::Detection_<ContainerAllocator1> & lhs, const ::ars548_messages::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3760b05dc425bea9898067baeb462326";
  }

  static const char* value(const ::ars548_messages::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3760b05dc425bea9ULL;
  static const uint64_t static_value2 = 0x898067baeb462326ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/Detection";
  }

  static const char* value(const ::ars548_messages::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 f_azimuthangle #Unaligned Detection Azimuth Angle\n"
"float32 f_azimuthanglestd #Azimuth Angle Std\n"
"uint8 u_invalidflags #Detection Invalid Flags \n"
"float32 f_elevationangle #Unaligned Detection Elevation Angle\n"
"float32 f_elevationanglestd #Elevation Angle Std\n"
"float32 f_range #Detection Radial Distance\n"
"float32 f_rangestd #Radial Distance Std\n"
"float32 f_rangerate #Detection Radial Velocity\n"
"float32 f_rangeratestd #Radial Velocity Std\n"
"int8 s_rcs #Detection RCS\n"
"uint16 u_measurementid #Detection ID\n"
"uint8 u_positivepredictivevalue #Existence Probability\n"
"uint8 u_classification #Detection Classification\n"
"uint8 u_multitargetprobabilitym #Multi-Target Probability\n"
"uint16 u_objectid #Associated Object ID\n"
"uint8 u_ambiguityflag #Probability for resolved velocity ambiguity\n"
"uint16 u_sortindex #tbd\n"
;
  }

  static const char* value(const ::ars548_messages::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.f_azimuthangle);
      stream.next(m.f_azimuthanglestd);
      stream.next(m.u_invalidflags);
      stream.next(m.f_elevationangle);
      stream.next(m.f_elevationanglestd);
      stream.next(m.f_range);
      stream.next(m.f_rangestd);
      stream.next(m.f_rangerate);
      stream.next(m.f_rangeratestd);
      stream.next(m.s_rcs);
      stream.next(m.u_measurementid);
      stream.next(m.u_positivepredictivevalue);
      stream.next(m.u_classification);
      stream.next(m.u_multitargetprobabilitym);
      stream.next(m.u_objectid);
      stream.next(m.u_ambiguityflag);
      stream.next(m.u_sortindex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::Detection_<ContainerAllocator>& v)
  {
    s << indent << "f_azimuthangle: ";
    Printer<float>::stream(s, indent + "  ", v.f_azimuthangle);
    s << indent << "f_azimuthanglestd: ";
    Printer<float>::stream(s, indent + "  ", v.f_azimuthanglestd);
    s << indent << "u_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_invalidflags);
    s << indent << "f_elevationangle: ";
    Printer<float>::stream(s, indent + "  ", v.f_elevationangle);
    s << indent << "f_elevationanglestd: ";
    Printer<float>::stream(s, indent + "  ", v.f_elevationanglestd);
    s << indent << "f_range: ";
    Printer<float>::stream(s, indent + "  ", v.f_range);
    s << indent << "f_rangestd: ";
    Printer<float>::stream(s, indent + "  ", v.f_rangestd);
    s << indent << "f_rangerate: ";
    Printer<float>::stream(s, indent + "  ", v.f_rangerate);
    s << indent << "f_rangeratestd: ";
    Printer<float>::stream(s, indent + "  ", v.f_rangeratestd);
    s << indent << "s_rcs: ";
    Printer<int8_t>::stream(s, indent + "  ", v.s_rcs);
    s << indent << "u_measurementid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_measurementid);
    s << indent << "u_positivepredictivevalue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_positivepredictivevalue);
    s << indent << "u_classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification);
    s << indent << "u_multitargetprobabilitym: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_multitargetprobabilitym);
    s << indent << "u_objectid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_objectid);
    s << indent << "u_ambiguityflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_ambiguityflag);
    s << indent << "u_sortindex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_sortindex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_DETECTION_H
