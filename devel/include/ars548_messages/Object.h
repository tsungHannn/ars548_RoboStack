// Generated by gencpp from file ars548_messages/Object.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_OBJECT_H
#define ARS548_MESSAGES_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : u_statussensor(0)
    , u_id(0)
    , u_age(0)
    , u_statusmeasurement(0)
    , u_statusmovement(0)
    , u_position_invalidflags(0)
    , u_position_reference(0)
    , u_position_x(0.0)
    , u_position_x_std(0.0)
    , u_position_y(0.0)
    , u_position_y_std(0.0)
    , u_position_z(0.0)
    , u_position_z_std(0.0)
    , u_position_covariancexy(0.0)
    , u_position_orientation(0.0)
    , u_position_orientation_std(0.0)
    , u_existence_invalidflags(0)
    , u_existence_probability(0.0)
    , u_existence_ppv(0.0)
    , u_classification_car(0)
    , u_classification_truck(0)
    , u_classification_motorcycle(0)
    , u_classification_bicycle(0)
    , u_classification_pedestrian(0)
    , u_classification_animal(0)
    , u_classification_hazard(0)
    , u_classification_unknown(0)
    , u_classification_overdrivable(0)
    , u_classification_underdrivable(0)
    , u_dynamics_absvel_invalidflags(0)
    , f_dynamics_absvel_x(0.0)
    , f_dynamics_absvel_x_std(0.0)
    , f_dynamics_absvel_y(0.0)
    , f_dynamics_absvel_y_std(0.0)
    , f_dynamics_absvel_covariancexy(0.0)
    , u_dynamics_relvel_invalidflags(0)
    , f_dynamics_relvel_x(0.0)
    , f_dynamics_relvel_x_std(0.0)
    , f_dynamics_relvel_y(0.0)
    , f_dynamics_relvel_y_std(0.0)
    , f_dynamics_relvel_covariancexy(0.0)
    , u_dynamics_absaccel_invalidflags(0)
    , f_dynamics_absaccel_x(0.0)
    , f_dynamics_absaccel_x_std(0.0)
    , f_dynamics_absaccel_y(0.0)
    , f_dynamics_absaccel_y_std(0.0)
    , f_dynamics_absaccel_covariancexy(0.0)
    , u_dynamics_relaccel_invalidflags(0)
    , f_dynamics_relaccel_x(0.0)
    , f_dynamics_relaccel_x_std(0.0)
    , f_dynamics_relaccel_y(0.0)
    , f_dynamics_relaccel_y_std(0.0)
    , f_dynamics_relaccel_covariancexy(0.0)
    , u_dynamics_orientation_invalidflags(0)
    , u_dynamics_orientation_rate_mean(0.0)
    , u_dynamics_orientation_rate_std(0.0)
    , u_shape_length_status(0)
    , u_shape_length_edge_invalidflags(0)
    , u_shape_length_edge_mean(0.0)
    , u_shape_length_edge_std(0.0)
    , u_shape_width_status(0)
    , u_shape_width_edge_invalidflags(0)
    , u_shape_width_edge_mean(0.0)
    , u_shape_width_edge_std(0.0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : u_statussensor(0)
    , u_id(0)
    , u_age(0)
    , u_statusmeasurement(0)
    , u_statusmovement(0)
    , u_position_invalidflags(0)
    , u_position_reference(0)
    , u_position_x(0.0)
    , u_position_x_std(0.0)
    , u_position_y(0.0)
    , u_position_y_std(0.0)
    , u_position_z(0.0)
    , u_position_z_std(0.0)
    , u_position_covariancexy(0.0)
    , u_position_orientation(0.0)
    , u_position_orientation_std(0.0)
    , u_existence_invalidflags(0)
    , u_existence_probability(0.0)
    , u_existence_ppv(0.0)
    , u_classification_car(0)
    , u_classification_truck(0)
    , u_classification_motorcycle(0)
    , u_classification_bicycle(0)
    , u_classification_pedestrian(0)
    , u_classification_animal(0)
    , u_classification_hazard(0)
    , u_classification_unknown(0)
    , u_classification_overdrivable(0)
    , u_classification_underdrivable(0)
    , u_dynamics_absvel_invalidflags(0)
    , f_dynamics_absvel_x(0.0)
    , f_dynamics_absvel_x_std(0.0)
    , f_dynamics_absvel_y(0.0)
    , f_dynamics_absvel_y_std(0.0)
    , f_dynamics_absvel_covariancexy(0.0)
    , u_dynamics_relvel_invalidflags(0)
    , f_dynamics_relvel_x(0.0)
    , f_dynamics_relvel_x_std(0.0)
    , f_dynamics_relvel_y(0.0)
    , f_dynamics_relvel_y_std(0.0)
    , f_dynamics_relvel_covariancexy(0.0)
    , u_dynamics_absaccel_invalidflags(0)
    , f_dynamics_absaccel_x(0.0)
    , f_dynamics_absaccel_x_std(0.0)
    , f_dynamics_absaccel_y(0.0)
    , f_dynamics_absaccel_y_std(0.0)
    , f_dynamics_absaccel_covariancexy(0.0)
    , u_dynamics_relaccel_invalidflags(0)
    , f_dynamics_relaccel_x(0.0)
    , f_dynamics_relaccel_x_std(0.0)
    , f_dynamics_relaccel_y(0.0)
    , f_dynamics_relaccel_y_std(0.0)
    , f_dynamics_relaccel_covariancexy(0.0)
    , u_dynamics_orientation_invalidflags(0)
    , u_dynamics_orientation_rate_mean(0.0)
    , u_dynamics_orientation_rate_std(0.0)
    , u_shape_length_status(0)
    , u_shape_length_edge_invalidflags(0)
    , u_shape_length_edge_mean(0.0)
    , u_shape_length_edge_std(0.0)
    , u_shape_width_status(0)
    , u_shape_width_edge_invalidflags(0)
    , u_shape_width_edge_mean(0.0)
    , u_shape_width_edge_std(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _u_statussensor_type;
  _u_statussensor_type u_statussensor;

   typedef uint32_t _u_id_type;
  _u_id_type u_id;

   typedef uint16_t _u_age_type;
  _u_age_type u_age;

   typedef uint8_t _u_statusmeasurement_type;
  _u_statusmeasurement_type u_statusmeasurement;

   typedef uint8_t _u_statusmovement_type;
  _u_statusmovement_type u_statusmovement;

   typedef uint16_t _u_position_invalidflags_type;
  _u_position_invalidflags_type u_position_invalidflags;

   typedef uint8_t _u_position_reference_type;
  _u_position_reference_type u_position_reference;

   typedef float _u_position_x_type;
  _u_position_x_type u_position_x;

   typedef float _u_position_x_std_type;
  _u_position_x_std_type u_position_x_std;

   typedef float _u_position_y_type;
  _u_position_y_type u_position_y;

   typedef float _u_position_y_std_type;
  _u_position_y_std_type u_position_y_std;

   typedef float _u_position_z_type;
  _u_position_z_type u_position_z;

   typedef float _u_position_z_std_type;
  _u_position_z_std_type u_position_z_std;

   typedef float _u_position_covariancexy_type;
  _u_position_covariancexy_type u_position_covariancexy;

   typedef float _u_position_orientation_type;
  _u_position_orientation_type u_position_orientation;

   typedef float _u_position_orientation_std_type;
  _u_position_orientation_std_type u_position_orientation_std;

   typedef uint8_t _u_existence_invalidflags_type;
  _u_existence_invalidflags_type u_existence_invalidflags;

   typedef float _u_existence_probability_type;
  _u_existence_probability_type u_existence_probability;

   typedef float _u_existence_ppv_type;
  _u_existence_ppv_type u_existence_ppv;

   typedef uint8_t _u_classification_car_type;
  _u_classification_car_type u_classification_car;

   typedef uint8_t _u_classification_truck_type;
  _u_classification_truck_type u_classification_truck;

   typedef uint8_t _u_classification_motorcycle_type;
  _u_classification_motorcycle_type u_classification_motorcycle;

   typedef uint8_t _u_classification_bicycle_type;
  _u_classification_bicycle_type u_classification_bicycle;

   typedef uint8_t _u_classification_pedestrian_type;
  _u_classification_pedestrian_type u_classification_pedestrian;

   typedef uint8_t _u_classification_animal_type;
  _u_classification_animal_type u_classification_animal;

   typedef uint8_t _u_classification_hazard_type;
  _u_classification_hazard_type u_classification_hazard;

   typedef uint8_t _u_classification_unknown_type;
  _u_classification_unknown_type u_classification_unknown;

   typedef uint8_t _u_classification_overdrivable_type;
  _u_classification_overdrivable_type u_classification_overdrivable;

   typedef uint8_t _u_classification_underdrivable_type;
  _u_classification_underdrivable_type u_classification_underdrivable;

   typedef uint8_t _u_dynamics_absvel_invalidflags_type;
  _u_dynamics_absvel_invalidflags_type u_dynamics_absvel_invalidflags;

   typedef float _f_dynamics_absvel_x_type;
  _f_dynamics_absvel_x_type f_dynamics_absvel_x;

   typedef float _f_dynamics_absvel_x_std_type;
  _f_dynamics_absvel_x_std_type f_dynamics_absvel_x_std;

   typedef float _f_dynamics_absvel_y_type;
  _f_dynamics_absvel_y_type f_dynamics_absvel_y;

   typedef float _f_dynamics_absvel_y_std_type;
  _f_dynamics_absvel_y_std_type f_dynamics_absvel_y_std;

   typedef float _f_dynamics_absvel_covariancexy_type;
  _f_dynamics_absvel_covariancexy_type f_dynamics_absvel_covariancexy;

   typedef uint8_t _u_dynamics_relvel_invalidflags_type;
  _u_dynamics_relvel_invalidflags_type u_dynamics_relvel_invalidflags;

   typedef float _f_dynamics_relvel_x_type;
  _f_dynamics_relvel_x_type f_dynamics_relvel_x;

   typedef float _f_dynamics_relvel_x_std_type;
  _f_dynamics_relvel_x_std_type f_dynamics_relvel_x_std;

   typedef float _f_dynamics_relvel_y_type;
  _f_dynamics_relvel_y_type f_dynamics_relvel_y;

   typedef float _f_dynamics_relvel_y_std_type;
  _f_dynamics_relvel_y_std_type f_dynamics_relvel_y_std;

   typedef float _f_dynamics_relvel_covariancexy_type;
  _f_dynamics_relvel_covariancexy_type f_dynamics_relvel_covariancexy;

   typedef uint8_t _u_dynamics_absaccel_invalidflags_type;
  _u_dynamics_absaccel_invalidflags_type u_dynamics_absaccel_invalidflags;

   typedef float _f_dynamics_absaccel_x_type;
  _f_dynamics_absaccel_x_type f_dynamics_absaccel_x;

   typedef float _f_dynamics_absaccel_x_std_type;
  _f_dynamics_absaccel_x_std_type f_dynamics_absaccel_x_std;

   typedef float _f_dynamics_absaccel_y_type;
  _f_dynamics_absaccel_y_type f_dynamics_absaccel_y;

   typedef float _f_dynamics_absaccel_y_std_type;
  _f_dynamics_absaccel_y_std_type f_dynamics_absaccel_y_std;

   typedef float _f_dynamics_absaccel_covariancexy_type;
  _f_dynamics_absaccel_covariancexy_type f_dynamics_absaccel_covariancexy;

   typedef uint8_t _u_dynamics_relaccel_invalidflags_type;
  _u_dynamics_relaccel_invalidflags_type u_dynamics_relaccel_invalidflags;

   typedef float _f_dynamics_relaccel_x_type;
  _f_dynamics_relaccel_x_type f_dynamics_relaccel_x;

   typedef float _f_dynamics_relaccel_x_std_type;
  _f_dynamics_relaccel_x_std_type f_dynamics_relaccel_x_std;

   typedef float _f_dynamics_relaccel_y_type;
  _f_dynamics_relaccel_y_type f_dynamics_relaccel_y;

   typedef float _f_dynamics_relaccel_y_std_type;
  _f_dynamics_relaccel_y_std_type f_dynamics_relaccel_y_std;

   typedef float _f_dynamics_relaccel_covariancexy_type;
  _f_dynamics_relaccel_covariancexy_type f_dynamics_relaccel_covariancexy;

   typedef uint8_t _u_dynamics_orientation_invalidflags_type;
  _u_dynamics_orientation_invalidflags_type u_dynamics_orientation_invalidflags;

   typedef float _u_dynamics_orientation_rate_mean_type;
  _u_dynamics_orientation_rate_mean_type u_dynamics_orientation_rate_mean;

   typedef float _u_dynamics_orientation_rate_std_type;
  _u_dynamics_orientation_rate_std_type u_dynamics_orientation_rate_std;

   typedef uint32_t _u_shape_length_status_type;
  _u_shape_length_status_type u_shape_length_status;

   typedef uint8_t _u_shape_length_edge_invalidflags_type;
  _u_shape_length_edge_invalidflags_type u_shape_length_edge_invalidflags;

   typedef float _u_shape_length_edge_mean_type;
  _u_shape_length_edge_mean_type u_shape_length_edge_mean;

   typedef float _u_shape_length_edge_std_type;
  _u_shape_length_edge_std_type u_shape_length_edge_std;

   typedef uint32_t _u_shape_width_status_type;
  _u_shape_width_status_type u_shape_width_status;

   typedef uint8_t _u_shape_width_edge_invalidflags_type;
  _u_shape_width_edge_invalidflags_type u_shape_width_edge_invalidflags;

   typedef float _u_shape_width_edge_mean_type;
  _u_shape_width_edge_mean_type u_shape_width_edge_mean;

   typedef float _u_shape_width_edge_std_type;
  _u_shape_width_edge_std_type u_shape_width_edge_std;





  typedef boost::shared_ptr< ::ars548_messages::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::ars548_messages::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::ars548_messages::Object > ObjectPtr;
typedef boost::shared_ptr< ::ars548_messages::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::Object_<ContainerAllocator1> & lhs, const ::ars548_messages::Object_<ContainerAllocator2> & rhs)
{
  return lhs.u_statussensor == rhs.u_statussensor &&
    lhs.u_id == rhs.u_id &&
    lhs.u_age == rhs.u_age &&
    lhs.u_statusmeasurement == rhs.u_statusmeasurement &&
    lhs.u_statusmovement == rhs.u_statusmovement &&
    lhs.u_position_invalidflags == rhs.u_position_invalidflags &&
    lhs.u_position_reference == rhs.u_position_reference &&
    lhs.u_position_x == rhs.u_position_x &&
    lhs.u_position_x_std == rhs.u_position_x_std &&
    lhs.u_position_y == rhs.u_position_y &&
    lhs.u_position_y_std == rhs.u_position_y_std &&
    lhs.u_position_z == rhs.u_position_z &&
    lhs.u_position_z_std == rhs.u_position_z_std &&
    lhs.u_position_covariancexy == rhs.u_position_covariancexy &&
    lhs.u_position_orientation == rhs.u_position_orientation &&
    lhs.u_position_orientation_std == rhs.u_position_orientation_std &&
    lhs.u_existence_invalidflags == rhs.u_existence_invalidflags &&
    lhs.u_existence_probability == rhs.u_existence_probability &&
    lhs.u_existence_ppv == rhs.u_existence_ppv &&
    lhs.u_classification_car == rhs.u_classification_car &&
    lhs.u_classification_truck == rhs.u_classification_truck &&
    lhs.u_classification_motorcycle == rhs.u_classification_motorcycle &&
    lhs.u_classification_bicycle == rhs.u_classification_bicycle &&
    lhs.u_classification_pedestrian == rhs.u_classification_pedestrian &&
    lhs.u_classification_animal == rhs.u_classification_animal &&
    lhs.u_classification_hazard == rhs.u_classification_hazard &&
    lhs.u_classification_unknown == rhs.u_classification_unknown &&
    lhs.u_classification_overdrivable == rhs.u_classification_overdrivable &&
    lhs.u_classification_underdrivable == rhs.u_classification_underdrivable &&
    lhs.u_dynamics_absvel_invalidflags == rhs.u_dynamics_absvel_invalidflags &&
    lhs.f_dynamics_absvel_x == rhs.f_dynamics_absvel_x &&
    lhs.f_dynamics_absvel_x_std == rhs.f_dynamics_absvel_x_std &&
    lhs.f_dynamics_absvel_y == rhs.f_dynamics_absvel_y &&
    lhs.f_dynamics_absvel_y_std == rhs.f_dynamics_absvel_y_std &&
    lhs.f_dynamics_absvel_covariancexy == rhs.f_dynamics_absvel_covariancexy &&
    lhs.u_dynamics_relvel_invalidflags == rhs.u_dynamics_relvel_invalidflags &&
    lhs.f_dynamics_relvel_x == rhs.f_dynamics_relvel_x &&
    lhs.f_dynamics_relvel_x_std == rhs.f_dynamics_relvel_x_std &&
    lhs.f_dynamics_relvel_y == rhs.f_dynamics_relvel_y &&
    lhs.f_dynamics_relvel_y_std == rhs.f_dynamics_relvel_y_std &&
    lhs.f_dynamics_relvel_covariancexy == rhs.f_dynamics_relvel_covariancexy &&
    lhs.u_dynamics_absaccel_invalidflags == rhs.u_dynamics_absaccel_invalidflags &&
    lhs.f_dynamics_absaccel_x == rhs.f_dynamics_absaccel_x &&
    lhs.f_dynamics_absaccel_x_std == rhs.f_dynamics_absaccel_x_std &&
    lhs.f_dynamics_absaccel_y == rhs.f_dynamics_absaccel_y &&
    lhs.f_dynamics_absaccel_y_std == rhs.f_dynamics_absaccel_y_std &&
    lhs.f_dynamics_absaccel_covariancexy == rhs.f_dynamics_absaccel_covariancexy &&
    lhs.u_dynamics_relaccel_invalidflags == rhs.u_dynamics_relaccel_invalidflags &&
    lhs.f_dynamics_relaccel_x == rhs.f_dynamics_relaccel_x &&
    lhs.f_dynamics_relaccel_x_std == rhs.f_dynamics_relaccel_x_std &&
    lhs.f_dynamics_relaccel_y == rhs.f_dynamics_relaccel_y &&
    lhs.f_dynamics_relaccel_y_std == rhs.f_dynamics_relaccel_y_std &&
    lhs.f_dynamics_relaccel_covariancexy == rhs.f_dynamics_relaccel_covariancexy &&
    lhs.u_dynamics_orientation_invalidflags == rhs.u_dynamics_orientation_invalidflags &&
    lhs.u_dynamics_orientation_rate_mean == rhs.u_dynamics_orientation_rate_mean &&
    lhs.u_dynamics_orientation_rate_std == rhs.u_dynamics_orientation_rate_std &&
    lhs.u_shape_length_status == rhs.u_shape_length_status &&
    lhs.u_shape_length_edge_invalidflags == rhs.u_shape_length_edge_invalidflags &&
    lhs.u_shape_length_edge_mean == rhs.u_shape_length_edge_mean &&
    lhs.u_shape_length_edge_std == rhs.u_shape_length_edge_std &&
    lhs.u_shape_width_status == rhs.u_shape_width_status &&
    lhs.u_shape_width_edge_invalidflags == rhs.u_shape_width_edge_invalidflags &&
    lhs.u_shape_width_edge_mean == rhs.u_shape_width_edge_mean &&
    lhs.u_shape_width_edge_std == rhs.u_shape_width_edge_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::Object_<ContainerAllocator1> & lhs, const ::ars548_messages::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a6bf48af76a68f467d67dd7b1137272";
  }

  static const char* value(const ::ars548_messages::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a6bf48af76a68f4ULL;
  static const uint64_t static_value2 = 0x67d67dd7b1137272ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/Object";
  }

  static const char* value(const ::ars548_messages::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 u_statussensor #tbd\n"
"uint32 u_id #Unique ID of object\n"
"uint16 u_age #Age of object\n"
"uint8 u_statusmeasurement #Object Status\n"
"uint8 u_statusmovement #Object Movement Status\n"
"uint16 u_position_invalidflags #tbd\n"
"uint8 u_position_reference #Reference point position\n"
"float32 u_position_x #X Position of reference point\n"
"float32 u_position_x_std #X Position Std\n"
"float32 u_position_y #Y Position of reference point\n"
"float32 u_position_y_std #Y Position Std\n"
"float32 u_position_z #Z Position of reference point\n"
"float32 u_position_z_std #Z Position Std\n"
"float32 u_position_covariancexy #Covariance X Y\n"
"float32 u_position_orientation #Object Orientation\n"
"float32 u_position_orientation_std #Orientation Std\n"
"uint8 u_existence_invalidflags #unused\n"
"float32 u_existence_probability #Probability of Existence\n"
"float32 u_existence_ppv #unused\n"
"uint8 u_classification_car #Car Classification Probability\n"
"uint8 u_classification_truck #Truck Classification Probability\n"
"uint8 u_classification_motorcycle #Motorcycle Classification Probability\n"
"uint8 u_classification_bicycle #Bicycle Classification Probability\n"
"uint8 u_classification_pedestrian #Pedestrian Classification Probability\n"
"uint8 u_classification_animal #Animal Classification Probability\n"
"uint8 u_classification_hazard #Hazard Classification Probability\n"
"uint8 u_classification_unknown #Unknown Classification Probability\n"
"uint8 u_classification_overdrivable #unused\n"
"uint8 u_classification_underdrivable #unused\n"
"uint8 u_dynamics_absvel_invalidflags #unused\n"
"float32 f_dynamics_absvel_x #X Absolute Velocity\n"
"float32 f_dynamics_absvel_x_std #X Absolute Velocity Std\n"
"float32 f_dynamics_absvel_y #Y Absolute Velocity\n"
"float32 f_dynamics_absvel_y_std #Y Absolute Velocity Std\n"
"float32 f_dynamics_absvel_covariancexy #Covariance Absolute Velocity X Y\n"
"uint8 u_dynamics_relvel_invalidflags #unused\n"
"float32 f_dynamics_relvel_x #X Relative Velocity\n"
"float32 f_dynamics_relvel_x_std #X Relative Velocity Std\n"
"float32 f_dynamics_relvel_y #Y Relative Velocity\n"
"float32 f_dynamics_relvel_y_std #Y Relative Velocity Std\n"
"float32 f_dynamics_relvel_covariancexy #Covariance Relative Velocity X Y\n"
"uint8 u_dynamics_absaccel_invalidflags #unused\n"
"float32 f_dynamics_absaccel_x #X Absolute Acceleration\n"
"float32 f_dynamics_absaccel_x_std #X Absolute Acceleration Std\n"
"float32 f_dynamics_absaccel_y #Y Absolute Acceleration\n"
"float32 f_dynamics_absaccel_y_std #Y Absolute Acceleration Std\n"
"float32 f_dynamics_absaccel_covariancexy #Covariance Absolute Acceleration X Y\n"
"uint8 u_dynamics_relaccel_invalidflags #unused\n"
"float32 f_dynamics_relaccel_x #X Relative Acceleration\n"
"float32 f_dynamics_relaccel_x_std #X Relative Acceleration Std\n"
"float32 f_dynamics_relaccel_y #Y Relative Acceleration\n"
"float32 f_dynamics_relaccel_y_std #Y Relative Acceleration Std\n"
"float32 f_dynamics_relaccel_covariancexy #Covariance Relative Acceleration X Y\n"
"uint8 u_dynamics_orientation_invalidflags #unused\n"
"float32 u_dynamics_orientation_rate_mean #Object Orientation Rate\n"
"float32 u_dynamics_orientation_rate_std #Orientation Rate Std\n"
"uint32 u_shape_length_status #(unused) Shape Length Status\n"
"uint8 u_shape_length_edge_invalidflags #(unused) Invalid Flags Shape Length \n"
"float32 u_shape_length_edge_mean #Mean Shape Length\n"
"float32 u_shape_length_edge_std #(unused) Shape Length Std\n"
"uint32 u_shape_width_status #(unused) Shape Width Status \n"
"uint8 u_shape_width_edge_invalidflags #(unused) Invalid Flags Shape Width\n"
"float32 u_shape_width_edge_mean #Mean Shape Width\n"
"float32 u_shape_width_edge_std #(unused) Shape Width Std \n"
;
  }

  static const char* value(const ::ars548_messages::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u_statussensor);
      stream.next(m.u_id);
      stream.next(m.u_age);
      stream.next(m.u_statusmeasurement);
      stream.next(m.u_statusmovement);
      stream.next(m.u_position_invalidflags);
      stream.next(m.u_position_reference);
      stream.next(m.u_position_x);
      stream.next(m.u_position_x_std);
      stream.next(m.u_position_y);
      stream.next(m.u_position_y_std);
      stream.next(m.u_position_z);
      stream.next(m.u_position_z_std);
      stream.next(m.u_position_covariancexy);
      stream.next(m.u_position_orientation);
      stream.next(m.u_position_orientation_std);
      stream.next(m.u_existence_invalidflags);
      stream.next(m.u_existence_probability);
      stream.next(m.u_existence_ppv);
      stream.next(m.u_classification_car);
      stream.next(m.u_classification_truck);
      stream.next(m.u_classification_motorcycle);
      stream.next(m.u_classification_bicycle);
      stream.next(m.u_classification_pedestrian);
      stream.next(m.u_classification_animal);
      stream.next(m.u_classification_hazard);
      stream.next(m.u_classification_unknown);
      stream.next(m.u_classification_overdrivable);
      stream.next(m.u_classification_underdrivable);
      stream.next(m.u_dynamics_absvel_invalidflags);
      stream.next(m.f_dynamics_absvel_x);
      stream.next(m.f_dynamics_absvel_x_std);
      stream.next(m.f_dynamics_absvel_y);
      stream.next(m.f_dynamics_absvel_y_std);
      stream.next(m.f_dynamics_absvel_covariancexy);
      stream.next(m.u_dynamics_relvel_invalidflags);
      stream.next(m.f_dynamics_relvel_x);
      stream.next(m.f_dynamics_relvel_x_std);
      stream.next(m.f_dynamics_relvel_y);
      stream.next(m.f_dynamics_relvel_y_std);
      stream.next(m.f_dynamics_relvel_covariancexy);
      stream.next(m.u_dynamics_absaccel_invalidflags);
      stream.next(m.f_dynamics_absaccel_x);
      stream.next(m.f_dynamics_absaccel_x_std);
      stream.next(m.f_dynamics_absaccel_y);
      stream.next(m.f_dynamics_absaccel_y_std);
      stream.next(m.f_dynamics_absaccel_covariancexy);
      stream.next(m.u_dynamics_relaccel_invalidflags);
      stream.next(m.f_dynamics_relaccel_x);
      stream.next(m.f_dynamics_relaccel_x_std);
      stream.next(m.f_dynamics_relaccel_y);
      stream.next(m.f_dynamics_relaccel_y_std);
      stream.next(m.f_dynamics_relaccel_covariancexy);
      stream.next(m.u_dynamics_orientation_invalidflags);
      stream.next(m.u_dynamics_orientation_rate_mean);
      stream.next(m.u_dynamics_orientation_rate_std);
      stream.next(m.u_shape_length_status);
      stream.next(m.u_shape_length_edge_invalidflags);
      stream.next(m.u_shape_length_edge_mean);
      stream.next(m.u_shape_length_edge_std);
      stream.next(m.u_shape_width_status);
      stream.next(m.u_shape_width_edge_invalidflags);
      stream.next(m.u_shape_width_edge_mean);
      stream.next(m.u_shape_width_edge_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::Object_<ContainerAllocator>& v)
  {
    s << indent << "u_statussensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_statussensor);
    s << indent << "u_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u_id);
    s << indent << "u_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_age);
    s << indent << "u_statusmeasurement: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_statusmeasurement);
    s << indent << "u_statusmovement: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_statusmovement);
    s << indent << "u_position_invalidflags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u_position_invalidflags);
    s << indent << "u_position_reference: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_position_reference);
    s << indent << "u_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_x);
    s << indent << "u_position_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_x_std);
    s << indent << "u_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_y);
    s << indent << "u_position_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_y_std);
    s << indent << "u_position_z: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_z);
    s << indent << "u_position_z_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_z_std);
    s << indent << "u_position_covariancexy: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_covariancexy);
    s << indent << "u_position_orientation: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_orientation);
    s << indent << "u_position_orientation_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_position_orientation_std);
    s << indent << "u_existence_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_existence_invalidflags);
    s << indent << "u_existence_probability: ";
    Printer<float>::stream(s, indent + "  ", v.u_existence_probability);
    s << indent << "u_existence_ppv: ";
    Printer<float>::stream(s, indent + "  ", v.u_existence_ppv);
    s << indent << "u_classification_car: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_car);
    s << indent << "u_classification_truck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_truck);
    s << indent << "u_classification_motorcycle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_motorcycle);
    s << indent << "u_classification_bicycle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_bicycle);
    s << indent << "u_classification_pedestrian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_pedestrian);
    s << indent << "u_classification_animal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_animal);
    s << indent << "u_classification_hazard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_hazard);
    s << indent << "u_classification_unknown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_unknown);
    s << indent << "u_classification_overdrivable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_overdrivable);
    s << indent << "u_classification_underdrivable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_classification_underdrivable);
    s << indent << "u_dynamics_absvel_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_dynamics_absvel_invalidflags);
    s << indent << "f_dynamics_absvel_x: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absvel_x);
    s << indent << "f_dynamics_absvel_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absvel_x_std);
    s << indent << "f_dynamics_absvel_y: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absvel_y);
    s << indent << "f_dynamics_absvel_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absvel_y_std);
    s << indent << "f_dynamics_absvel_covariancexy: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absvel_covariancexy);
    s << indent << "u_dynamics_relvel_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_dynamics_relvel_invalidflags);
    s << indent << "f_dynamics_relvel_x: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relvel_x);
    s << indent << "f_dynamics_relvel_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relvel_x_std);
    s << indent << "f_dynamics_relvel_y: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relvel_y);
    s << indent << "f_dynamics_relvel_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relvel_y_std);
    s << indent << "f_dynamics_relvel_covariancexy: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relvel_covariancexy);
    s << indent << "u_dynamics_absaccel_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_dynamics_absaccel_invalidflags);
    s << indent << "f_dynamics_absaccel_x: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absaccel_x);
    s << indent << "f_dynamics_absaccel_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absaccel_x_std);
    s << indent << "f_dynamics_absaccel_y: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absaccel_y);
    s << indent << "f_dynamics_absaccel_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absaccel_y_std);
    s << indent << "f_dynamics_absaccel_covariancexy: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_absaccel_covariancexy);
    s << indent << "u_dynamics_relaccel_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_dynamics_relaccel_invalidflags);
    s << indent << "f_dynamics_relaccel_x: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relaccel_x);
    s << indent << "f_dynamics_relaccel_x_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relaccel_x_std);
    s << indent << "f_dynamics_relaccel_y: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relaccel_y);
    s << indent << "f_dynamics_relaccel_y_std: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relaccel_y_std);
    s << indent << "f_dynamics_relaccel_covariancexy: ";
    Printer<float>::stream(s, indent + "  ", v.f_dynamics_relaccel_covariancexy);
    s << indent << "u_dynamics_orientation_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_dynamics_orientation_invalidflags);
    s << indent << "u_dynamics_orientation_rate_mean: ";
    Printer<float>::stream(s, indent + "  ", v.u_dynamics_orientation_rate_mean);
    s << indent << "u_dynamics_orientation_rate_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_dynamics_orientation_rate_std);
    s << indent << "u_shape_length_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u_shape_length_status);
    s << indent << "u_shape_length_edge_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_shape_length_edge_invalidflags);
    s << indent << "u_shape_length_edge_mean: ";
    Printer<float>::stream(s, indent + "  ", v.u_shape_length_edge_mean);
    s << indent << "u_shape_length_edge_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_shape_length_edge_std);
    s << indent << "u_shape_width_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u_shape_width_status);
    s << indent << "u_shape_width_edge_invalidflags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u_shape_width_edge_invalidflags);
    s << indent << "u_shape_width_edge_mean: ";
    Printer<float>::stream(s, indent + "  ", v.u_shape_width_edge_mean);
    s << indent << "u_shape_width_edge_std: ";
    Printer<float>::stream(s, indent + "  ", v.u_shape_width_edge_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_OBJECT_H
