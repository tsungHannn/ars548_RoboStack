// Generated by gencpp from file ars548_messages/VelocityVehicle.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_VELOCITYVEHICLE_H
#define ARS548_MESSAGES_MESSAGE_VELOCITYVEHICLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct VelocityVehicle_
{
  typedef VelocityVehicle_<ContainerAllocator> Type;

  VelocityVehicle_()
    : statusvelocitynearstandstill(0)
    , qualifiervelocityvehicle(0)
    , velocityvehicleeventdataqualifier(0)
    , velocityvehicle(0.0)
    , velocityvehicle_invalidflag(0)  {
    }
  VelocityVehicle_(const ContainerAllocator& _alloc)
    : statusvelocitynearstandstill(0)
    , qualifiervelocityvehicle(0)
    , velocityvehicleeventdataqualifier(0)
    , velocityvehicle(0.0)
    , velocityvehicle_invalidflag(0)  {
  (void)_alloc;
    }



   typedef uint8_t _statusvelocitynearstandstill_type;
  _statusvelocitynearstandstill_type statusvelocitynearstandstill;

   typedef uint8_t _qualifiervelocityvehicle_type;
  _qualifiervelocityvehicle_type qualifiervelocityvehicle;

   typedef uint8_t _velocityvehicleeventdataqualifier_type;
  _velocityvehicleeventdataqualifier_type velocityvehicleeventdataqualifier;

   typedef float _velocityvehicle_type;
  _velocityvehicle_type velocityvehicle;

   typedef uint8_t _velocityvehicle_invalidflag_type;
  _velocityvehicle_invalidflag_type velocityvehicle_invalidflag;





  typedef boost::shared_ptr< ::ars548_messages::VelocityVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::VelocityVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityVehicle_

typedef ::ars548_messages::VelocityVehicle_<std::allocator<void> > VelocityVehicle;

typedef boost::shared_ptr< ::ars548_messages::VelocityVehicle > VelocityVehiclePtr;
typedef boost::shared_ptr< ::ars548_messages::VelocityVehicle const> VelocityVehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::VelocityVehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::VelocityVehicle_<ContainerAllocator1> & lhs, const ::ars548_messages::VelocityVehicle_<ContainerAllocator2> & rhs)
{
  return lhs.statusvelocitynearstandstill == rhs.statusvelocitynearstandstill &&
    lhs.qualifiervelocityvehicle == rhs.qualifiervelocityvehicle &&
    lhs.velocityvehicleeventdataqualifier == rhs.velocityvehicleeventdataqualifier &&
    lhs.velocityvehicle == rhs.velocityvehicle &&
    lhs.velocityvehicle_invalidflag == rhs.velocityvehicle_invalidflag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::VelocityVehicle_<ContainerAllocator1> & lhs, const ::ars548_messages::VelocityVehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::VelocityVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::VelocityVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::VelocityVehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3ed8fe15e904859bdc21697bcec872a";
  }

  static const char* value(const ::ars548_messages::VelocityVehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3ed8fe15e904859ULL;
  static const uint64_t static_value2 = 0xbdc21697bcec872aULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/VelocityVehicle";
  }

  static const char* value(const ::ars548_messages::VelocityVehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 statusvelocitynearstandstill #(unused) Velocity near standstill status\n"
"uint8 qualifiervelocityvehicle  #(unused) VelovityVehicle qualifier\n"
"uint8 velocityvehicleeventdataqualifier #(unused) Event data qualifier VelocityVehicle\n"
"float32 velocityvehicle # VelocityVehicle\n"
"uint8 velocityvehicle_invalidflag #(unused) Invalid flag VelocityVehicle\n"
;
  }

  static const char* value(const ::ars548_messages::VelocityVehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.statusvelocitynearstandstill);
      stream.next(m.qualifiervelocityvehicle);
      stream.next(m.velocityvehicleeventdataqualifier);
      stream.next(m.velocityvehicle);
      stream.next(m.velocityvehicle_invalidflag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::VelocityVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::VelocityVehicle_<ContainerAllocator>& v)
  {
    s << indent << "statusvelocitynearstandstill: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.statusvelocitynearstandstill);
    s << indent << "qualifiervelocityvehicle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifiervelocityvehicle);
    s << indent << "velocityvehicleeventdataqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocityvehicleeventdataqualifier);
    s << indent << "velocityvehicle: ";
    Printer<float>::stream(s, indent + "  ", v.velocityvehicle);
    s << indent << "velocityvehicle_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocityvehicle_invalidflag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_VELOCITYVEHICLE_H
