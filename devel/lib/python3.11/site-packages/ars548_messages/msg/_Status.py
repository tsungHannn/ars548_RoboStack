# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Status(genpy.Message):
  _md5sum = "434403d6c9393e6a7279af521716619e"
  _type = "ars548_messages/Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 timestamp_nanoseconds #Timestamp Nanoseconds
uint32 timestamp_seconds #Timestamp Seconds
uint8 timestamp_syncstatus #Timestamp Sync Status
uint8 swversion_major #Software version (major)
uint8 swversion_minor #Software version (minor)
uint8 swversion_patch #Software version (patch)
float32 longitudinal #Longitudinal sensor position (AUTOSAR)
float32 lateral #Lateral sensor position (AUTOSAR)
float32 vertical #Vertical sensor position (AUTOSAR)
float32 yaw #Sensor yaw angle (AUTOSAR)
float32 pitch #Sensor pitch angle (AUTOSAR)
uint8 plugorientation #Orientation of plug
float32 length #Vehicle length
float32 width #Vehicle width
float32 height #Vehicle height
float32 wheelbase #Vehicle wheelbase
uint16 maximundistance #Maximum detection distance
uint8 frequencyslot #Center frequency
uint8 cycletime #Cycle time
uint8 timeslot #Cycle offset
uint8 hcc #Country code
uint8 powersave_standstill #Power saving in standstill
uint32 sensoripaddress_0 #Sensor IP address
uint32 sensoripaddress_1 #Reserved
uint8 configurationcounter #Counter that counts up if new configuration has been received and accepted
uint8 status_longitudinalvelocity #Signals if current VDY is OK or timed out
uint8 status_longitudinalacceleration #Signals if current VDY is OK or timed out
uint8 status_lateralacceleration #Signals if current VDY is OK or timed out
uint8 status_yawrate #Signals if current VDY is OK or timed out
uint8 status_steeringangle #Signals if current VDY is OK or timed out
uint8 status_drivingdirection #Signals if current VDY is OK or timed out
uint8 status_characteristicspeed #(Unused) Signals if current VDY is OK or timed out.
uint8 status_radarstatus #Signals if Radar Status is OK
uint8 status_voltagestatus # Bitfield to report under- and overvoltage errors
uint8 status_temperaturestatus #Bitfield to report under- and overtemperature errors
uint8 status_blockagestatus #Current blockage state and blockage self test state."""
  __slots__ = ['timestamp_nanoseconds','timestamp_seconds','timestamp_syncstatus','swversion_major','swversion_minor','swversion_patch','longitudinal','lateral','vertical','yaw','pitch','plugorientation','length','width','height','wheelbase','maximundistance','frequencyslot','cycletime','timeslot','hcc','powersave_standstill','sensoripaddress_0','sensoripaddress_1','configurationcounter','status_longitudinalvelocity','status_longitudinalacceleration','status_lateralacceleration','status_yawrate','status_steeringangle','status_drivingdirection','status_characteristicspeed','status_radarstatus','status_voltagestatus','status_temperaturestatus','status_blockagestatus']
  _slot_types = ['uint32','uint32','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','uint16','uint8','uint8','uint8','uint8','uint8','uint32','uint32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_nanoseconds,timestamp_seconds,timestamp_syncstatus,swversion_major,swversion_minor,swversion_patch,longitudinal,lateral,vertical,yaw,pitch,plugorientation,length,width,height,wheelbase,maximundistance,frequencyslot,cycletime,timeslot,hcc,powersave_standstill,sensoripaddress_0,sensoripaddress_1,configurationcounter,status_longitudinalvelocity,status_longitudinalacceleration,status_lateralacceleration,status_yawrate,status_steeringangle,status_drivingdirection,status_characteristicspeed,status_radarstatus,status_voltagestatus,status_temperaturestatus,status_blockagestatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_nanoseconds is None:
        self.timestamp_nanoseconds = 0
      if self.timestamp_seconds is None:
        self.timestamp_seconds = 0
      if self.timestamp_syncstatus is None:
        self.timestamp_syncstatus = 0
      if self.swversion_major is None:
        self.swversion_major = 0
      if self.swversion_minor is None:
        self.swversion_minor = 0
      if self.swversion_patch is None:
        self.swversion_patch = 0
      if self.longitudinal is None:
        self.longitudinal = 0.
      if self.lateral is None:
        self.lateral = 0.
      if self.vertical is None:
        self.vertical = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.plugorientation is None:
        self.plugorientation = 0
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.wheelbase is None:
        self.wheelbase = 0.
      if self.maximundistance is None:
        self.maximundistance = 0
      if self.frequencyslot is None:
        self.frequencyslot = 0
      if self.cycletime is None:
        self.cycletime = 0
      if self.timeslot is None:
        self.timeslot = 0
      if self.hcc is None:
        self.hcc = 0
      if self.powersave_standstill is None:
        self.powersave_standstill = 0
      if self.sensoripaddress_0 is None:
        self.sensoripaddress_0 = 0
      if self.sensoripaddress_1 is None:
        self.sensoripaddress_1 = 0
      if self.configurationcounter is None:
        self.configurationcounter = 0
      if self.status_longitudinalvelocity is None:
        self.status_longitudinalvelocity = 0
      if self.status_longitudinalacceleration is None:
        self.status_longitudinalacceleration = 0
      if self.status_lateralacceleration is None:
        self.status_lateralacceleration = 0
      if self.status_yawrate is None:
        self.status_yawrate = 0
      if self.status_steeringangle is None:
        self.status_steeringangle = 0
      if self.status_drivingdirection is None:
        self.status_drivingdirection = 0
      if self.status_characteristicspeed is None:
        self.status_characteristicspeed = 0
      if self.status_radarstatus is None:
        self.status_radarstatus = 0
      if self.status_voltagestatus is None:
        self.status_voltagestatus = 0
      if self.status_temperaturestatus is None:
        self.status_temperaturestatus = 0
      if self.status_blockagestatus is None:
        self.status_blockagestatus = 0
    else:
      self.timestamp_nanoseconds = 0
      self.timestamp_seconds = 0
      self.timestamp_syncstatus = 0
      self.swversion_major = 0
      self.swversion_minor = 0
      self.swversion_patch = 0
      self.longitudinal = 0.
      self.lateral = 0.
      self.vertical = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.plugorientation = 0
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.wheelbase = 0.
      self.maximundistance = 0
      self.frequencyslot = 0
      self.cycletime = 0
      self.timeslot = 0
      self.hcc = 0
      self.powersave_standstill = 0
      self.sensoripaddress_0 = 0
      self.sensoripaddress_1 = 0
      self.configurationcounter = 0
      self.status_longitudinalvelocity = 0
      self.status_longitudinalacceleration = 0
      self.status_lateralacceleration = 0
      self.status_yawrate = 0
      self.status_steeringangle = 0
      self.status_drivingdirection = 0
      self.status_characteristicspeed = 0
      self.status_radarstatus = 0
      self.status_voltagestatus = 0
      self.status_temperaturestatus = 0
      self.status_blockagestatus = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I4B5fB4fH5B2I12B().pack(_x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.swversion_major, _x.swversion_minor, _x.swversion_patch, _x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximundistance, _x.frequencyslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.configurationcounter, _x.status_longitudinalvelocity, _x.status_longitudinalacceleration, _x.status_lateralacceleration, _x.status_yawrate, _x.status_steeringangle, _x.status_drivingdirection, _x.status_characteristicspeed, _x.status_radarstatus, _x.status_voltagestatus, _x.status_temperaturestatus, _x.status_blockagestatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.swversion_major, _x.swversion_minor, _x.swversion_patch, _x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximundistance, _x.frequencyslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.configurationcounter, _x.status_longitudinalvelocity, _x.status_longitudinalacceleration, _x.status_lateralacceleration, _x.status_yawrate, _x.status_steeringangle, _x.status_drivingdirection, _x.status_characteristicspeed, _x.status_radarstatus, _x.status_voltagestatus, _x.status_temperaturestatus, _x.status_blockagestatus,) = _get_struct_2I4B5fB4fH5B2I12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I4B5fB4fH5B2I12B().pack(_x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.swversion_major, _x.swversion_minor, _x.swversion_patch, _x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximundistance, _x.frequencyslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.configurationcounter, _x.status_longitudinalvelocity, _x.status_longitudinalacceleration, _x.status_lateralacceleration, _x.status_yawrate, _x.status_steeringangle, _x.status_drivingdirection, _x.status_characteristicspeed, _x.status_radarstatus, _x.status_voltagestatus, _x.status_temperaturestatus, _x.status_blockagestatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.swversion_major, _x.swversion_minor, _x.swversion_patch, _x.longitudinal, _x.lateral, _x.vertical, _x.yaw, _x.pitch, _x.plugorientation, _x.length, _x.width, _x.height, _x.wheelbase, _x.maximundistance, _x.frequencyslot, _x.cycletime, _x.timeslot, _x.hcc, _x.powersave_standstill, _x.sensoripaddress_0, _x.sensoripaddress_1, _x.configurationcounter, _x.status_longitudinalvelocity, _x.status_longitudinalacceleration, _x.status_lateralacceleration, _x.status_yawrate, _x.status_steeringangle, _x.status_drivingdirection, _x.status_characteristicspeed, _x.status_radarstatus, _x.status_voltagestatus, _x.status_temperaturestatus, _x.status_blockagestatus,) = _get_struct_2I4B5fB4fH5B2I12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4B5fB4fH5B2I12B = None
def _get_struct_2I4B5fB4fH5B2I12B():
    global _struct_2I4B5fB4fH5B2I12B
    if _struct_2I4B5fB4fH5B2I12B is None:
        _struct_2I4B5fB4fH5B2I12B = struct.Struct("<2I4B5fB4fH5B2I12B")
    return _struct_2I4B5fB4fH5B2I12B
