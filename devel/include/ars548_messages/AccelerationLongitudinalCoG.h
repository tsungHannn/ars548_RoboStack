// Generated by gencpp from file ars548_messages/AccelerationLongitudinalCoG.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_ACCELERATIONLONGITUDINALCOG_H
#define ARS548_MESSAGES_MESSAGE_ACCELERATIONLONGITUDINALCOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct AccelerationLongitudinalCoG_
{
  typedef AccelerationLongitudinalCoG_<ContainerAllocator> Type;

  AccelerationLongitudinalCoG_()
    : accelerationlongitudinalerramp(0.0)
    , accelerationlongitudinalerramp_invalidflag(0)
    , qualifieraccelerationlongitudinal(0)
    , accelerationlongitudinal(0.0)
    , accelerationlongitudinal_invalidflag(0)
    , accelerationlongitudinaleventdataqualifier(0)  {
    }
  AccelerationLongitudinalCoG_(const ContainerAllocator& _alloc)
    : accelerationlongitudinalerramp(0.0)
    , accelerationlongitudinalerramp_invalidflag(0)
    , qualifieraccelerationlongitudinal(0)
    , accelerationlongitudinal(0.0)
    , accelerationlongitudinal_invalidflag(0)
    , accelerationlongitudinaleventdataqualifier(0)  {
  (void)_alloc;
    }



   typedef float _accelerationlongitudinalerramp_type;
  _accelerationlongitudinalerramp_type accelerationlongitudinalerramp;

   typedef uint8_t _accelerationlongitudinalerramp_invalidflag_type;
  _accelerationlongitudinalerramp_invalidflag_type accelerationlongitudinalerramp_invalidflag;

   typedef uint8_t _qualifieraccelerationlongitudinal_type;
  _qualifieraccelerationlongitudinal_type qualifieraccelerationlongitudinal;

   typedef float _accelerationlongitudinal_type;
  _accelerationlongitudinal_type accelerationlongitudinal;

   typedef uint8_t _accelerationlongitudinal_invalidflag_type;
  _accelerationlongitudinal_invalidflag_type accelerationlongitudinal_invalidflag;

   typedef uint8_t _accelerationlongitudinaleventdataqualifier_type;
  _accelerationlongitudinaleventdataqualifier_type accelerationlongitudinaleventdataqualifier;





  typedef boost::shared_ptr< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationLongitudinalCoG_

typedef ::ars548_messages::AccelerationLongitudinalCoG_<std::allocator<void> > AccelerationLongitudinalCoG;

typedef boost::shared_ptr< ::ars548_messages::AccelerationLongitudinalCoG > AccelerationLongitudinalCoGPtr;
typedef boost::shared_ptr< ::ars548_messages::AccelerationLongitudinalCoG const> AccelerationLongitudinalCoGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator1> & lhs, const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator2> & rhs)
{
  return lhs.accelerationlongitudinalerramp == rhs.accelerationlongitudinalerramp &&
    lhs.accelerationlongitudinalerramp_invalidflag == rhs.accelerationlongitudinalerramp_invalidflag &&
    lhs.qualifieraccelerationlongitudinal == rhs.qualifieraccelerationlongitudinal &&
    lhs.accelerationlongitudinal == rhs.accelerationlongitudinal &&
    lhs.accelerationlongitudinal_invalidflag == rhs.accelerationlongitudinal_invalidflag &&
    lhs.accelerationlongitudinaleventdataqualifier == rhs.accelerationlongitudinaleventdataqualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator1> & lhs, const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eafbbce434bfbd2d5decf0da9141fd7";
  }

  static const char* value(const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eafbbce434bfbd2ULL;
  static const uint64_t static_value2 = 0xd5decf0da9141fd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/AccelerationLongitudinalCoG";
  }

  static const char* value(const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 accelerationlongitudinalerramp #(Unused) Error amplitude of longitudinal acceleration\n"
"uint8 accelerationlongitudinalerramp_invalidflag #(Unused) Invalid Flags AccelLongErrAmp \n"
"uint8 qualifieraccelerationlongitudinal #(Unused) Longitudinal Acceleration Qualifier \n"
"float32 accelerationlongitudinal #Longitudinal Acceleration\n"
"uint8 accelerationlongitudinal_invalidflag #(Unused) Invalid Flag Longitudinal Acceleration \n"
"uint8 accelerationlongitudinaleventdataqualifier #(Unused) Event Data Qualifier Longitudinal Acceleration \n"
"\n"
;
  }

  static const char* value(const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accelerationlongitudinalerramp);
      stream.next(m.accelerationlongitudinalerramp_invalidflag);
      stream.next(m.qualifieraccelerationlongitudinal);
      stream.next(m.accelerationlongitudinal);
      stream.next(m.accelerationlongitudinal_invalidflag);
      stream.next(m.accelerationlongitudinaleventdataqualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationLongitudinalCoG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::AccelerationLongitudinalCoG_<ContainerAllocator>& v)
  {
    s << indent << "accelerationlongitudinalerramp: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationlongitudinalerramp);
    s << indent << "accelerationlongitudinalerramp_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlongitudinalerramp_invalidflag);
    s << indent << "qualifieraccelerationlongitudinal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifieraccelerationlongitudinal);
    s << indent << "accelerationlongitudinal: ";
    Printer<float>::stream(s, indent + "  ", v.accelerationlongitudinal);
    s << indent << "accelerationlongitudinal_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlongitudinal_invalidflag);
    s << indent << "accelerationlongitudinaleventdataqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerationlongitudinaleventdataqualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_ACCELERATIONLONGITUDINALCOG_H
