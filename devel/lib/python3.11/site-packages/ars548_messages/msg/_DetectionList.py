# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/DetectionList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ars548_messages.msg
import std_msgs.msg

class DetectionList(genpy.Message):
  _md5sum = "dfc9cd5cc1729d9eb247feb85b81b126"
  _type = "ars548_messages/DetectionList"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint64 crc #Checksum (E2E Profile 7) (Reserved)
uint32 length #Len (E2E Profile 7) (Reserved)
uint32 sqc #SQC (E2E Profile 7) (Reserved)
uint32 dataid #Data ID (E2E Profile 7) (Reserved)
uint32 timestamp_nanoseconds #Timestamp Nanoseconds
uint32 timestamp_seconds #Timestamp Seconds
uint8 timestamp_syncstatus #Timestamp Sync Status
uint32 eventdataqualifier #Event Data Qualifier (unused)
uint8 extendedqualifier #Extended Qualifier (unused)
uint16 origin_invalidflags #Sensor Position Invalid flags (unused)
float32 origin_xpos #Sensor X Position with reference to rear axle
float32 origin_xstd #Sensor X Position STD (unused)
float32 origin_ypos #Sensor Y Position with reference to rear axle
float32 origin_ystd #Sensor Y Position STD (unused)
float32 origin_zpos #Sensor Z Position with reference to rear axle
float32 origin_zstd #Sensor Z Position STD (unused)
float32 origin_roll #Sensor Roll Angle (unused)
float32 origin_rollstd #Sensor Roll Angle STD (unused)
float32 origin_pitch #Sensor Pitch Angle with alignment correction
float32 origin_pitchstd #Sensor Pitch Angle STD
float32 origin_yaw #Sensor Yaw Angle with alignment correction
float32 origin_yawstd #Sensor Yaw Angle STD
uint8 list_invalidflags #Invalid flags (unused)
Detection[800] list_detections #Detection Array
float32 list_radveldomain_min #Ambiguity free Doppler velocity range Min
float32 list_radveldomain_max #Ambiguity free Doppler velocity range Max
uint32 list_numofdetections #Number of Detections
float32 aln_azimuthcorrection #Azimuth Alignment Correction
float32 aln_elevationcorrection #Elevation Alignment Correction
uint8 aln_status #Status of alignment
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: ars548_messages/Detection
float32 f_azimuthangle #Unaligned Detection Azimuth Angle
float32 f_azimuthanglestd #Azimuth Angle Std
uint8 u_invalidflags #Detection Invalid Flags 
float32 f_elevationangle #Unaligned Detection Elevation Angle
float32 f_elevationanglestd #Elevation Angle Std
float32 f_range #Detection Radial Distance
float32 f_rangestd #Radial Distance Std
float32 f_rangerate #Detection Radial Velocity
float32 f_rangeratestd #Radial Velocity Std
int8 s_rcs #Detection RCS
uint16 u_measurementid #Detection ID
uint8 u_positivepredictivevalue #Existence Probability
uint8 u_classification #Detection Classification
uint8 u_multitargetprobabilitym #Multi-Target Probability
uint16 u_objectid #Associated Object ID
uint8 u_ambiguityflag #Probability for resolved velocity ambiguity
uint16 u_sortindex #tbd"""
  __slots__ = ['header','crc','length','sqc','dataid','timestamp_nanoseconds','timestamp_seconds','timestamp_syncstatus','eventdataqualifier','extendedqualifier','origin_invalidflags','origin_xpos','origin_xstd','origin_ypos','origin_ystd','origin_zpos','origin_zstd','origin_roll','origin_rollstd','origin_pitch','origin_pitchstd','origin_yaw','origin_yawstd','list_invalidflags','list_detections','list_radveldomain_min','list_radveldomain_max','list_numofdetections','aln_azimuthcorrection','aln_elevationcorrection','aln_status']
  _slot_types = ['std_msgs/Header','uint64','uint32','uint32','uint32','uint32','uint32','uint8','uint32','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','ars548_messages/Detection[800]','float32','float32','uint32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,crc,length,sqc,dataid,timestamp_nanoseconds,timestamp_seconds,timestamp_syncstatus,eventdataqualifier,extendedqualifier,origin_invalidflags,origin_xpos,origin_xstd,origin_ypos,origin_ystd,origin_zpos,origin_zstd,origin_roll,origin_rollstd,origin_pitch,origin_pitchstd,origin_yaw,origin_yawstd,list_invalidflags,list_detections,list_radveldomain_min,list_radveldomain_max,list_numofdetections,aln_azimuthcorrection,aln_elevationcorrection,aln_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DetectionList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.crc is None:
        self.crc = 0
      if self.length is None:
        self.length = 0
      if self.sqc is None:
        self.sqc = 0
      if self.dataid is None:
        self.dataid = 0
      if self.timestamp_nanoseconds is None:
        self.timestamp_nanoseconds = 0
      if self.timestamp_seconds is None:
        self.timestamp_seconds = 0
      if self.timestamp_syncstatus is None:
        self.timestamp_syncstatus = 0
      if self.eventdataqualifier is None:
        self.eventdataqualifier = 0
      if self.extendedqualifier is None:
        self.extendedqualifier = 0
      if self.origin_invalidflags is None:
        self.origin_invalidflags = 0
      if self.origin_xpos is None:
        self.origin_xpos = 0.
      if self.origin_xstd is None:
        self.origin_xstd = 0.
      if self.origin_ypos is None:
        self.origin_ypos = 0.
      if self.origin_ystd is None:
        self.origin_ystd = 0.
      if self.origin_zpos is None:
        self.origin_zpos = 0.
      if self.origin_zstd is None:
        self.origin_zstd = 0.
      if self.origin_roll is None:
        self.origin_roll = 0.
      if self.origin_rollstd is None:
        self.origin_rollstd = 0.
      if self.origin_pitch is None:
        self.origin_pitch = 0.
      if self.origin_pitchstd is None:
        self.origin_pitchstd = 0.
      if self.origin_yaw is None:
        self.origin_yaw = 0.
      if self.origin_yawstd is None:
        self.origin_yawstd = 0.
      if self.list_invalidflags is None:
        self.list_invalidflags = 0
      if self.list_detections is None:
        self.list_detections = [ars548_messages.msg.Detection() for _ in range(800)]
      if self.list_radveldomain_min is None:
        self.list_radveldomain_min = 0.
      if self.list_radveldomain_max is None:
        self.list_radveldomain_max = 0.
      if self.list_numofdetections is None:
        self.list_numofdetections = 0
      if self.aln_azimuthcorrection is None:
        self.aln_azimuthcorrection = 0.
      if self.aln_elevationcorrection is None:
        self.aln_elevationcorrection = 0.
      if self.aln_status is None:
        self.aln_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.crc = 0
      self.length = 0
      self.sqc = 0
      self.dataid = 0
      self.timestamp_nanoseconds = 0
      self.timestamp_seconds = 0
      self.timestamp_syncstatus = 0
      self.eventdataqualifier = 0
      self.extendedqualifier = 0
      self.origin_invalidflags = 0
      self.origin_xpos = 0.
      self.origin_xstd = 0.
      self.origin_ypos = 0.
      self.origin_ystd = 0.
      self.origin_zpos = 0.
      self.origin_zstd = 0.
      self.origin_roll = 0.
      self.origin_rollstd = 0.
      self.origin_pitch = 0.
      self.origin_pitchstd = 0.
      self.origin_yaw = 0.
      self.origin_yawstd = 0.
      self.list_invalidflags = 0
      self.list_detections = [ars548_messages.msg.Detection() for _ in range(800)]
      self.list_radveldomain_min = 0.
      self.list_radveldomain_max = 0.
      self.list_numofdetections = 0
      self.aln_azimuthcorrection = 0.
      self.aln_elevationcorrection = 0.
      self.aln_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q5IBIBH12fB().pack(_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.origin_invalidflags, _x.origin_xpos, _x.origin_xstd, _x.origin_ypos, _x.origin_ystd, _x.origin_zpos, _x.origin_zstd, _x.origin_roll, _x.origin_rollstd, _x.origin_pitch, _x.origin_pitchstd, _x.origin_yaw, _x.origin_yawstd, _x.list_invalidflags))
      if len(self.list_detections) != 800:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (800, len(self.list_detections), 'self.list_detections')))
      for val1 in self.list_detections:
        _x = val1
        buff.write(_get_struct_2fB6fbH3BHBH().pack(_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex))
      _x = self
      buff.write(_get_struct_2fI2fB().pack(_x.list_radveldomain_min, _x.list_radveldomain_max, _x.list_numofdetections, _x.aln_azimuthcorrection, _x.aln_elevationcorrection, _x.aln_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.list_detections is None:
        self.list_detections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.origin_invalidflags, _x.origin_xpos, _x.origin_xstd, _x.origin_ypos, _x.origin_ystd, _x.origin_zpos, _x.origin_zstd, _x.origin_roll, _x.origin_rollstd, _x.origin_pitch, _x.origin_pitchstd, _x.origin_yaw, _x.origin_yawstd, _x.list_invalidflags,) = _get_struct_Q5IBIBH12fB().unpack(str[start:end])
      self.list_detections = []
      for i in range(0, 800):
        val1 = ars548_messages.msg.Detection()
        _x = val1
        start = end
        end += 44
        (_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex,) = _get_struct_2fB6fbH3BHBH().unpack(str[start:end])
        self.list_detections.append(val1)
      _x = self
      start = end
      end += 21
      (_x.list_radveldomain_min, _x.list_radveldomain_max, _x.list_numofdetections, _x.aln_azimuthcorrection, _x.aln_elevationcorrection, _x.aln_status,) = _get_struct_2fI2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q5IBIBH12fB().pack(_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.origin_invalidflags, _x.origin_xpos, _x.origin_xstd, _x.origin_ypos, _x.origin_ystd, _x.origin_zpos, _x.origin_zstd, _x.origin_roll, _x.origin_rollstd, _x.origin_pitch, _x.origin_pitchstd, _x.origin_yaw, _x.origin_yawstd, _x.list_invalidflags))
      if len(self.list_detections) != 800:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (800, len(self.list_detections), 'self.list_detections')))
      for val1 in self.list_detections:
        _x = val1
        buff.write(_get_struct_2fB6fbH3BHBH().pack(_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex))
      _x = self
      buff.write(_get_struct_2fI2fB().pack(_x.list_radveldomain_min, _x.list_radveldomain_max, _x.list_numofdetections, _x.aln_azimuthcorrection, _x.aln_elevationcorrection, _x.aln_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.list_detections is None:
        self.list_detections = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.crc, _x.length, _x.sqc, _x.dataid, _x.timestamp_nanoseconds, _x.timestamp_seconds, _x.timestamp_syncstatus, _x.eventdataqualifier, _x.extendedqualifier, _x.origin_invalidflags, _x.origin_xpos, _x.origin_xstd, _x.origin_ypos, _x.origin_ystd, _x.origin_zpos, _x.origin_zstd, _x.origin_roll, _x.origin_rollstd, _x.origin_pitch, _x.origin_pitchstd, _x.origin_yaw, _x.origin_yawstd, _x.list_invalidflags,) = _get_struct_Q5IBIBH12fB().unpack(str[start:end])
      self.list_detections = []
      for i in range(0, 800):
        val1 = ars548_messages.msg.Detection()
        _x = val1
        start = end
        end += 44
        (_x.f_azimuthangle, _x.f_azimuthanglestd, _x.u_invalidflags, _x.f_elevationangle, _x.f_elevationanglestd, _x.f_range, _x.f_rangestd, _x.f_rangerate, _x.f_rangeratestd, _x.s_rcs, _x.u_measurementid, _x.u_positivepredictivevalue, _x.u_classification, _x.u_multitargetprobabilitym, _x.u_objectid, _x.u_ambiguityflag, _x.u_sortindex,) = _get_struct_2fB6fbH3BHBH().unpack(str[start:end])
        self.list_detections.append(val1)
      _x = self
      start = end
      end += 21
      (_x.list_radveldomain_min, _x.list_radveldomain_max, _x.list_numofdetections, _x.aln_azimuthcorrection, _x.aln_elevationcorrection, _x.aln_status,) = _get_struct_2fI2fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB6fbH3BHBH = None
def _get_struct_2fB6fbH3BHBH():
    global _struct_2fB6fbH3BHBH
    if _struct_2fB6fbH3BHBH is None:
        _struct_2fB6fbH3BHBH = struct.Struct("<2fB6fbH3BHBH")
    return _struct_2fB6fbH3BHBH
_struct_2fI2fB = None
def _get_struct_2fI2fB():
    global _struct_2fI2fB
    if _struct_2fI2fB is None:
        _struct_2fI2fB = struct.Struct("<2fI2fB")
    return _struct_2fI2fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q5IBIBH12fB = None
def _get_struct_Q5IBIBH12fB():
    global _struct_Q5IBIBH12fB
    if _struct_Q5IBIBH12fB is None:
        _struct_Q5IBIBH12fB = struct.Struct("<Q5IBIBH12fB")
    return _struct_Q5IBIBH12fB
