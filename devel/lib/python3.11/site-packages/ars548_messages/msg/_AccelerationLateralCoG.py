# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars548_messages/AccelerationLateralCoG.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AccelerationLateralCoG(genpy.Message):
  _md5sum = "9d1e6bf3d430a2b77911a476ca617783"
  _type = "ars548_messages/AccelerationLateralCoG"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 accelerationlateralerramp #(Unused) Error Amplitude of Lateral Acceleration 
uint8 accelerationlateralerramp_invalidflag #(Unused) Invalid Flags AccelLatErrAmp  
uint8 qualifieraccelerationlateral #(Unused) Lateral Acceleration Qualifier 
float32 accelerationlateral #Lateral Acceleration
uint8 accelerationlateral_invalidflag #(Unused) Invalid Flag Lateral Acceleration 
uint8 accelerationlateraleventdataqualifier #(Unused) Event Data Qualifier Lateral Acceleration """
  __slots__ = ['accelerationlateralerramp','accelerationlateralerramp_invalidflag','qualifieraccelerationlateral','accelerationlateral','accelerationlateral_invalidflag','accelerationlateraleventdataqualifier']
  _slot_types = ['float32','uint8','uint8','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       accelerationlateralerramp,accelerationlateralerramp_invalidflag,qualifieraccelerationlateral,accelerationlateral,accelerationlateral_invalidflag,accelerationlateraleventdataqualifier

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AccelerationLateralCoG, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.accelerationlateralerramp is None:
        self.accelerationlateralerramp = 0.
      if self.accelerationlateralerramp_invalidflag is None:
        self.accelerationlateralerramp_invalidflag = 0
      if self.qualifieraccelerationlateral is None:
        self.qualifieraccelerationlateral = 0
      if self.accelerationlateral is None:
        self.accelerationlateral = 0.
      if self.accelerationlateral_invalidflag is None:
        self.accelerationlateral_invalidflag = 0
      if self.accelerationlateraleventdataqualifier is None:
        self.accelerationlateraleventdataqualifier = 0
    else:
      self.accelerationlateralerramp = 0.
      self.accelerationlateralerramp_invalidflag = 0
      self.qualifieraccelerationlateral = 0
      self.accelerationlateral = 0.
      self.accelerationlateral_invalidflag = 0
      self.accelerationlateraleventdataqualifier = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_f2Bf2B().pack(_x.accelerationlateralerramp, _x.accelerationlateralerramp_invalidflag, _x.qualifieraccelerationlateral, _x.accelerationlateral, _x.accelerationlateral_invalidflag, _x.accelerationlateraleventdataqualifier))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.accelerationlateralerramp, _x.accelerationlateralerramp_invalidflag, _x.qualifieraccelerationlateral, _x.accelerationlateral, _x.accelerationlateral_invalidflag, _x.accelerationlateraleventdataqualifier,) = _get_struct_f2Bf2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_f2Bf2B().pack(_x.accelerationlateralerramp, _x.accelerationlateralerramp_invalidflag, _x.qualifieraccelerationlateral, _x.accelerationlateral, _x.accelerationlateral_invalidflag, _x.accelerationlateraleventdataqualifier))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.accelerationlateralerramp, _x.accelerationlateralerramp_invalidflag, _x.qualifieraccelerationlateral, _x.accelerationlateral, _x.accelerationlateral_invalidflag, _x.accelerationlateraleventdataqualifier,) = _get_struct_f2Bf2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f2Bf2B = None
def _get_struct_f2Bf2B():
    global _struct_f2Bf2B
    if _struct_f2Bf2B is None:
        _struct_f2Bf2B = struct.Struct("<f2Bf2B")
    return _struct_f2Bf2B
