// Generated by gencpp from file ars548_messages/SteeringAngleFrontAxle.msg
// DO NOT EDIT!


#ifndef ARS548_MESSAGES_MESSAGE_STEERINGANGLEFRONTAXLE_H
#define ARS548_MESSAGES_MESSAGE_STEERINGANGLEFRONTAXLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars548_messages
{
template <class ContainerAllocator>
struct SteeringAngleFrontAxle_
{
  typedef SteeringAngleFrontAxle_<ContainerAllocator> Type;

  SteeringAngleFrontAxle_()
    : qualifiersteeringanglefrontaxle(0)
    , steeringanglefrontaxleerramp(0.0)
    , steeringanglefrontaxleerramp_invalidflag(0)
    , steeringanglefrontaxle(0.0)
    , steeringanglefrontaxle_invalidflag(0)
    , steeringanglefrontaxleeventdataqualifier(0)  {
    }
  SteeringAngleFrontAxle_(const ContainerAllocator& _alloc)
    : qualifiersteeringanglefrontaxle(0)
    , steeringanglefrontaxleerramp(0.0)
    , steeringanglefrontaxleerramp_invalidflag(0)
    , steeringanglefrontaxle(0.0)
    , steeringanglefrontaxle_invalidflag(0)
    , steeringanglefrontaxleeventdataqualifier(0)  {
  (void)_alloc;
    }



   typedef uint8_t _qualifiersteeringanglefrontaxle_type;
  _qualifiersteeringanglefrontaxle_type qualifiersteeringanglefrontaxle;

   typedef float _steeringanglefrontaxleerramp_type;
  _steeringanglefrontaxleerramp_type steeringanglefrontaxleerramp;

   typedef uint8_t _steeringanglefrontaxleerramp_invalidflag_type;
  _steeringanglefrontaxleerramp_invalidflag_type steeringanglefrontaxleerramp_invalidflag;

   typedef float _steeringanglefrontaxle_type;
  _steeringanglefrontaxle_type steeringanglefrontaxle;

   typedef uint8_t _steeringanglefrontaxle_invalidflag_type;
  _steeringanglefrontaxle_invalidflag_type steeringanglefrontaxle_invalidflag;

   typedef uint8_t _steeringanglefrontaxleeventdataqualifier_type;
  _steeringanglefrontaxleeventdataqualifier_type steeringanglefrontaxleeventdataqualifier;





  typedef boost::shared_ptr< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> const> ConstPtr;

}; // struct SteeringAngleFrontAxle_

typedef ::ars548_messages::SteeringAngleFrontAxle_<std::allocator<void> > SteeringAngleFrontAxle;

typedef boost::shared_ptr< ::ars548_messages::SteeringAngleFrontAxle > SteeringAngleFrontAxlePtr;
typedef boost::shared_ptr< ::ars548_messages::SteeringAngleFrontAxle const> SteeringAngleFrontAxleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator1> & lhs, const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator2> & rhs)
{
  return lhs.qualifiersteeringanglefrontaxle == rhs.qualifiersteeringanglefrontaxle &&
    lhs.steeringanglefrontaxleerramp == rhs.steeringanglefrontaxleerramp &&
    lhs.steeringanglefrontaxleerramp_invalidflag == rhs.steeringanglefrontaxleerramp_invalidflag &&
    lhs.steeringanglefrontaxle == rhs.steeringanglefrontaxle &&
    lhs.steeringanglefrontaxle_invalidflag == rhs.steeringanglefrontaxle_invalidflag &&
    lhs.steeringanglefrontaxleeventdataqualifier == rhs.steeringanglefrontaxleeventdataqualifier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator1> & lhs, const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars548_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "165f91e8ecdcab06db8015b2dbf74ced";
  }

  static const char* value(const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x165f91e8ecdcab06ULL;
  static const uint64_t static_value2 = 0xdb8015b2dbf74cedULL;
};

template<class ContainerAllocator>
struct DataType< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars548_messages/SteeringAngleFrontAxle";
  }

  static const char* value(const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 qualifiersteeringanglefrontaxle #(unused) Steering angle front axle qualifier\n"
"float32 steeringanglefrontaxleerramp #(unused) Error amplitude of steering angle front axle\n"
"uint8 steeringanglefrontaxleerramp_invalidflag #(unused) Invalid flag steering angle front axle errAmp\n"
"float32 steeringanglefrontaxle #Steering angle front axle\n"
"uint8 steeringanglefrontaxle_invalidflag #(unused) Invalid flag steeting angle front axle\n"
"uint8 steeringanglefrontaxleeventdataqualifier #(unused) Event data qualifier steering angle front axle\n"
;
  }

  static const char* value(const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qualifiersteeringanglefrontaxle);
      stream.next(m.steeringanglefrontaxleerramp);
      stream.next(m.steeringanglefrontaxleerramp_invalidflag);
      stream.next(m.steeringanglefrontaxle);
      stream.next(m.steeringanglefrontaxle_invalidflag);
      stream.next(m.steeringanglefrontaxleeventdataqualifier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SteeringAngleFrontAxle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars548_messages::SteeringAngleFrontAxle_<ContainerAllocator>& v)
  {
    s << indent << "qualifiersteeringanglefrontaxle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.qualifiersteeringanglefrontaxle);
    s << indent << "steeringanglefrontaxleerramp: ";
    Printer<float>::stream(s, indent + "  ", v.steeringanglefrontaxleerramp);
    s << indent << "steeringanglefrontaxleerramp_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steeringanglefrontaxleerramp_invalidflag);
    s << indent << "steeringanglefrontaxle: ";
    Printer<float>::stream(s, indent + "  ", v.steeringanglefrontaxle);
    s << indent << "steeringanglefrontaxle_invalidflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steeringanglefrontaxle_invalidflag);
    s << indent << "steeringanglefrontaxleeventdataqualifier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steeringanglefrontaxleeventdataqualifier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS548_MESSAGES_MESSAGE_STEERINGANGLEFRONTAXLE_H
